import org.aspectjml.ajmlrac.runtime.*;
public privileged aspect AspectJMLRac$JMLRacPost4Project {

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.ufrn.imd.application.Main object$rac): (execution( * br.ufrn.imd.application.Main..*+.*(..))
          || execution(br.ufrn.imd.application.Main..*+.new(..))
          || execution( * br.ufrn.imd.application.Main+.*(..))
          || execution(br.ufrn.imd.application.Main+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.ufrn.imd.application.Main..*+.*(..))
          || execution(br.ufrn.imd.application.Main..*+.new(..))
          || execution( * br.ufrn.imd.application.Main+.*(..))
          || execution(br.ufrn.imd.application.Main+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to recover checked exceptions. *
  *  This is based on the exception introduction pattern by Laddad. */
  after(final br.ufrn.imd.business.ClientService object$rac) throwing(JMLInternalRuntimeException rac$e)
    throws br.ufrn.imd.exceptions.BusinessException : (execution(* br.ufrn.imd.business.ClientService..*+.*(..) throws br.ufrn.imd.exceptions.BusinessException) ||
    execution(br.ufrn.imd.business.ClientService..*+.new(..) throws br.ufrn.imd.exceptions.BusinessException) ||
execution(* br.ufrn.imd.business.ClientService+.*(..) throws br.ufrn.imd.exceptions.BusinessException) ||
    execution(br.ufrn.imd.business.ClientService+.new(..) throws br.ufrn.imd.exceptions.BusinessException)) && 
   target(object$rac) {
    Throwable cause = rac$e.getCause();
    if(cause instanceof br.ufrn.imd.exceptions.BusinessException) {
      throw (br.ufrn.imd.exceptions.BusinessException)cause;
    }
    JMLChecker.rethrowUncheckedException(cause);
  }
  after(final br.ufrn.imd.business.ClientService object$rac) throwing(JMLInternalRuntimeException rac$e)
    throws br.ufrn.imd.exceptions.DataException : (execution(* br.ufrn.imd.business.ClientService..*+.*(..) throws br.ufrn.imd.exceptions.DataException) ||
    execution(br.ufrn.imd.business.ClientService..*+.new(..) throws br.ufrn.imd.exceptions.DataException) ||
execution(* br.ufrn.imd.business.ClientService+.*(..) throws br.ufrn.imd.exceptions.DataException) ||
    execution(br.ufrn.imd.business.ClientService+.new(..) throws br.ufrn.imd.exceptions.DataException)) && 
   target(object$rac) {
    Throwable cause = rac$e.getCause();
    if(cause instanceof br.ufrn.imd.exceptions.DataException) {
      throw (br.ufrn.imd.exceptions.DataException)cause;
    }
    JMLChecker.rethrowUncheckedException(cause);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.ufrn.imd.business.ClientService object$rac): (execution( * br.ufrn.imd.business.ClientService..*+.*(..))
          || execution(br.ufrn.imd.business.ClientService..*+.new(..))
          || execution( * br.ufrn.imd.business.ClientService+.*(..))
          || execution(br.ufrn.imd.business.ClientService+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.ufrn.imd.business.ClientService..*+.*(..))
          || execution(br.ufrn.imd.business.ClientService..*+.new(..))
          || execution( * br.ufrn.imd.business.ClientService+.*(..))
          || execution(br.ufrn.imd.business.ClientService+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to recover checked exceptions. *
  *  This is based on the exception introduction pattern by Laddad. */
  after(final br.ufrn.imd.business.IClientService object$rac) throwing(JMLInternalRuntimeException rac$e)
    throws br.ufrn.imd.exceptions.BusinessException : (execution(* br.ufrn.imd.business.IClientService..*+.*(..) throws br.ufrn.imd.exceptions.BusinessException) ||
    execution(br.ufrn.imd.business.IClientService..*+.new(..) throws br.ufrn.imd.exceptions.BusinessException) ||
execution(* br.ufrn.imd.business.IClientService+.*(..) throws br.ufrn.imd.exceptions.BusinessException) ||
    execution(br.ufrn.imd.business.IClientService+.new(..) throws br.ufrn.imd.exceptions.BusinessException)) && 
   target(object$rac) {
    Throwable cause = rac$e.getCause();
    if(cause instanceof br.ufrn.imd.exceptions.BusinessException) {
      throw (br.ufrn.imd.exceptions.BusinessException)cause;
    }
    JMLChecker.rethrowUncheckedException(cause);
  }
  after(final br.ufrn.imd.business.IClientService object$rac) throwing(JMLInternalRuntimeException rac$e)
    throws br.ufrn.imd.exceptions.DataException : (execution(* br.ufrn.imd.business.IClientService..*+.*(..) throws br.ufrn.imd.exceptions.DataException) ||
    execution(br.ufrn.imd.business.IClientService..*+.new(..) throws br.ufrn.imd.exceptions.DataException) ||
execution(* br.ufrn.imd.business.IClientService+.*(..) throws br.ufrn.imd.exceptions.DataException) ||
    execution(br.ufrn.imd.business.IClientService+.new(..) throws br.ufrn.imd.exceptions.DataException)) && 
   target(object$rac) {
    Throwable cause = rac$e.getCause();
    if(cause instanceof br.ufrn.imd.exceptions.DataException) {
      throw (br.ufrn.imd.exceptions.DataException)cause;
    }
    JMLChecker.rethrowUncheckedException(cause);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.ufrn.imd.business.IClientService object$rac): (execution( * br.ufrn.imd.business.IClientService..*+.*(..))
          || execution(br.ufrn.imd.business.IClientService..*+.new(..))
          || execution( * br.ufrn.imd.business.IClientService+.*(..))
          || execution(br.ufrn.imd.business.IClientService+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.ufrn.imd.business.IClientService..*+.*(..))
          || execution(br.ufrn.imd.business.IClientService..*+.new(..))
          || execution( * br.ufrn.imd.business.IClientService+.*(..))
          || execution(br.ufrn.imd.business.IClientService+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to recover checked exceptions. *
  *  This is based on the exception introduction pattern by Laddad. */
  after(final br.ufrn.imd.business.IProductService object$rac) throwing(JMLInternalRuntimeException rac$e)
    throws br.ufrn.imd.exceptions.BusinessException : (execution(* br.ufrn.imd.business.IProductService..*+.*(..) throws br.ufrn.imd.exceptions.BusinessException) ||
    execution(br.ufrn.imd.business.IProductService..*+.new(..) throws br.ufrn.imd.exceptions.BusinessException) ||
execution(* br.ufrn.imd.business.IProductService+.*(..) throws br.ufrn.imd.exceptions.BusinessException) ||
    execution(br.ufrn.imd.business.IProductService+.new(..) throws br.ufrn.imd.exceptions.BusinessException)) && 
   target(object$rac) {
    Throwable cause = rac$e.getCause();
    if(cause instanceof br.ufrn.imd.exceptions.BusinessException) {
      throw (br.ufrn.imd.exceptions.BusinessException)cause;
    }
    JMLChecker.rethrowUncheckedException(cause);
  }
  after(final br.ufrn.imd.business.IProductService object$rac) throwing(JMLInternalRuntimeException rac$e)
    throws br.ufrn.imd.exceptions.DataException : (execution(* br.ufrn.imd.business.IProductService..*+.*(..) throws br.ufrn.imd.exceptions.DataException) ||
    execution(br.ufrn.imd.business.IProductService..*+.new(..) throws br.ufrn.imd.exceptions.DataException) ||
execution(* br.ufrn.imd.business.IProductService+.*(..) throws br.ufrn.imd.exceptions.DataException) ||
    execution(br.ufrn.imd.business.IProductService+.new(..) throws br.ufrn.imd.exceptions.DataException)) && 
   target(object$rac) {
    Throwable cause = rac$e.getCause();
    if(cause instanceof br.ufrn.imd.exceptions.DataException) {
      throw (br.ufrn.imd.exceptions.DataException)cause;
    }
    JMLChecker.rethrowUncheckedException(cause);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.ufrn.imd.business.IProductService object$rac): (execution( * br.ufrn.imd.business.IProductService..*+.*(..))
          || execution(br.ufrn.imd.business.IProductService..*+.new(..))
          || execution( * br.ufrn.imd.business.IProductService+.*(..))
          || execution(br.ufrn.imd.business.IProductService+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.ufrn.imd.business.IProductService..*+.*(..))
          || execution(br.ufrn.imd.business.IProductService..*+.new(..))
          || execution( * br.ufrn.imd.business.IProductService+.*(..))
          || execution(br.ufrn.imd.business.IProductService+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to recover checked exceptions. *
  *  This is based on the exception introduction pattern by Laddad. */
  after(final br.ufrn.imd.business.ITagService object$rac) throwing(JMLInternalRuntimeException rac$e)
    throws br.ufrn.imd.exceptions.BusinessException : (execution(* br.ufrn.imd.business.ITagService..*+.*(..) throws br.ufrn.imd.exceptions.BusinessException) ||
    execution(br.ufrn.imd.business.ITagService..*+.new(..) throws br.ufrn.imd.exceptions.BusinessException) ||
execution(* br.ufrn.imd.business.ITagService+.*(..) throws br.ufrn.imd.exceptions.BusinessException) ||
    execution(br.ufrn.imd.business.ITagService+.new(..) throws br.ufrn.imd.exceptions.BusinessException)) && 
   target(object$rac) {
    Throwable cause = rac$e.getCause();
    if(cause instanceof br.ufrn.imd.exceptions.BusinessException) {
      throw (br.ufrn.imd.exceptions.BusinessException)cause;
    }
    JMLChecker.rethrowUncheckedException(cause);
  }
  after(final br.ufrn.imd.business.ITagService object$rac) throwing(JMLInternalRuntimeException rac$e)
    throws br.ufrn.imd.exceptions.DataException : (execution(* br.ufrn.imd.business.ITagService..*+.*(..) throws br.ufrn.imd.exceptions.DataException) ||
    execution(br.ufrn.imd.business.ITagService..*+.new(..) throws br.ufrn.imd.exceptions.DataException) ||
execution(* br.ufrn.imd.business.ITagService+.*(..) throws br.ufrn.imd.exceptions.DataException) ||
    execution(br.ufrn.imd.business.ITagService+.new(..) throws br.ufrn.imd.exceptions.DataException)) && 
   target(object$rac) {
    Throwable cause = rac$e.getCause();
    if(cause instanceof br.ufrn.imd.exceptions.DataException) {
      throw (br.ufrn.imd.exceptions.DataException)cause;
    }
    JMLChecker.rethrowUncheckedException(cause);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.ufrn.imd.business.ITagService object$rac): (execution( * br.ufrn.imd.business.ITagService..*+.*(..))
          || execution(br.ufrn.imd.business.ITagService..*+.new(..))
          || execution( * br.ufrn.imd.business.ITagService+.*(..))
          || execution(br.ufrn.imd.business.ITagService+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.ufrn.imd.business.ITagService..*+.*(..))
          || execution(br.ufrn.imd.business.ITagService..*+.new(..))
          || execution( * br.ufrn.imd.business.ITagService+.*(..))
          || execution(br.ufrn.imd.business.ITagService+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to recover checked exceptions. *
  *  This is based on the exception introduction pattern by Laddad. */
  after(final br.ufrn.imd.business.ITransactionService object$rac) throwing(JMLInternalRuntimeException rac$e)
    throws br.ufrn.imd.exceptions.DataException : (execution(* br.ufrn.imd.business.ITransactionService..*+.*(..) throws br.ufrn.imd.exceptions.DataException) ||
    execution(br.ufrn.imd.business.ITransactionService..*+.new(..) throws br.ufrn.imd.exceptions.DataException) ||
execution(* br.ufrn.imd.business.ITransactionService+.*(..) throws br.ufrn.imd.exceptions.DataException) ||
    execution(br.ufrn.imd.business.ITransactionService+.new(..) throws br.ufrn.imd.exceptions.DataException)) && 
   target(object$rac) {
    Throwable cause = rac$e.getCause();
    if(cause instanceof br.ufrn.imd.exceptions.DataException) {
      throw (br.ufrn.imd.exceptions.DataException)cause;
    }
    JMLChecker.rethrowUncheckedException(cause);
  }
  after(final br.ufrn.imd.business.ITransactionService object$rac) throwing(JMLInternalRuntimeException rac$e)
    throws br.ufrn.imd.exceptions.BusinessException : (execution(* br.ufrn.imd.business.ITransactionService..*+.*(..) throws br.ufrn.imd.exceptions.BusinessException) ||
    execution(br.ufrn.imd.business.ITransactionService..*+.new(..) throws br.ufrn.imd.exceptions.BusinessException) ||
execution(* br.ufrn.imd.business.ITransactionService+.*(..) throws br.ufrn.imd.exceptions.BusinessException) ||
    execution(br.ufrn.imd.business.ITransactionService+.new(..) throws br.ufrn.imd.exceptions.BusinessException)) && 
   target(object$rac) {
    Throwable cause = rac$e.getCause();
    if(cause instanceof br.ufrn.imd.exceptions.BusinessException) {
      throw (br.ufrn.imd.exceptions.BusinessException)cause;
    }
    JMLChecker.rethrowUncheckedException(cause);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.ufrn.imd.business.ITransactionService object$rac): (execution( * br.ufrn.imd.business.ITransactionService..*+.*(..))
          || execution(br.ufrn.imd.business.ITransactionService..*+.new(..))
          || execution( * br.ufrn.imd.business.ITransactionService+.*(..))
          || execution(br.ufrn.imd.business.ITransactionService+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.ufrn.imd.business.ITransactionService..*+.*(..))
          || execution(br.ufrn.imd.business.ITransactionService..*+.new(..))
          || execution( * br.ufrn.imd.business.ITransactionService+.*(..))
          || execution(br.ufrn.imd.business.ITransactionService+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to recover checked exceptions. *
  *  This is based on the exception introduction pattern by Laddad. */
  after(final br.ufrn.imd.business.ProductService object$rac) throwing(JMLInternalRuntimeException rac$e)
    throws br.ufrn.imd.exceptions.BusinessException : (execution(* br.ufrn.imd.business.ProductService..*+.*(..) throws br.ufrn.imd.exceptions.BusinessException) ||
    execution(br.ufrn.imd.business.ProductService..*+.new(..) throws br.ufrn.imd.exceptions.BusinessException) ||
execution(* br.ufrn.imd.business.ProductService+.*(..) throws br.ufrn.imd.exceptions.BusinessException) ||
    execution(br.ufrn.imd.business.ProductService+.new(..) throws br.ufrn.imd.exceptions.BusinessException)) && 
   target(object$rac) {
    Throwable cause = rac$e.getCause();
    if(cause instanceof br.ufrn.imd.exceptions.BusinessException) {
      throw (br.ufrn.imd.exceptions.BusinessException)cause;
    }
    JMLChecker.rethrowUncheckedException(cause);
  }
  after(final br.ufrn.imd.business.ProductService object$rac) throwing(JMLInternalRuntimeException rac$e)
    throws br.ufrn.imd.exceptions.DataException : (execution(* br.ufrn.imd.business.ProductService..*+.*(..) throws br.ufrn.imd.exceptions.DataException) ||
    execution(br.ufrn.imd.business.ProductService..*+.new(..) throws br.ufrn.imd.exceptions.DataException) ||
execution(* br.ufrn.imd.business.ProductService+.*(..) throws br.ufrn.imd.exceptions.DataException) ||
    execution(br.ufrn.imd.business.ProductService+.new(..) throws br.ufrn.imd.exceptions.DataException)) && 
   target(object$rac) {
    Throwable cause = rac$e.getCause();
    if(cause instanceof br.ufrn.imd.exceptions.DataException) {
      throw (br.ufrn.imd.exceptions.DataException)cause;
    }
    JMLChecker.rethrowUncheckedException(cause);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.ufrn.imd.business.ProductService object$rac): (execution( * br.ufrn.imd.business.ProductService..*+.*(..))
          || execution(br.ufrn.imd.business.ProductService..*+.new(..))
          || execution( * br.ufrn.imd.business.ProductService+.*(..))
          || execution(br.ufrn.imd.business.ProductService+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.ufrn.imd.business.ProductService..*+.*(..))
          || execution(br.ufrn.imd.business.ProductService..*+.new(..))
          || execution( * br.ufrn.imd.business.ProductService+.*(..))
          || execution(br.ufrn.imd.business.ProductService+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to recover checked exceptions. *
  *  This is based on the exception introduction pattern by Laddad. */
  after(final br.ufrn.imd.business.TagService object$rac) throwing(JMLInternalRuntimeException rac$e)
    throws br.ufrn.imd.exceptions.BusinessException : (execution(* br.ufrn.imd.business.TagService..*+.*(..) throws br.ufrn.imd.exceptions.BusinessException) ||
    execution(br.ufrn.imd.business.TagService..*+.new(..) throws br.ufrn.imd.exceptions.BusinessException) ||
execution(* br.ufrn.imd.business.TagService+.*(..) throws br.ufrn.imd.exceptions.BusinessException) ||
    execution(br.ufrn.imd.business.TagService+.new(..) throws br.ufrn.imd.exceptions.BusinessException)) && 
   target(object$rac) {
    Throwable cause = rac$e.getCause();
    if(cause instanceof br.ufrn.imd.exceptions.BusinessException) {
      throw (br.ufrn.imd.exceptions.BusinessException)cause;
    }
    JMLChecker.rethrowUncheckedException(cause);
  }
  after(final br.ufrn.imd.business.TagService object$rac) throwing(JMLInternalRuntimeException rac$e)
    throws br.ufrn.imd.exceptions.DataException : (execution(* br.ufrn.imd.business.TagService..*+.*(..) throws br.ufrn.imd.exceptions.DataException) ||
    execution(br.ufrn.imd.business.TagService..*+.new(..) throws br.ufrn.imd.exceptions.DataException) ||
execution(* br.ufrn.imd.business.TagService+.*(..) throws br.ufrn.imd.exceptions.DataException) ||
    execution(br.ufrn.imd.business.TagService+.new(..) throws br.ufrn.imd.exceptions.DataException)) && 
   target(object$rac) {
    Throwable cause = rac$e.getCause();
    if(cause instanceof br.ufrn.imd.exceptions.DataException) {
      throw (br.ufrn.imd.exceptions.DataException)cause;
    }
    JMLChecker.rethrowUncheckedException(cause);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.ufrn.imd.business.TagService object$rac): (execution( * br.ufrn.imd.business.TagService..*+.*(..))
          || execution(br.ufrn.imd.business.TagService..*+.new(..))
          || execution( * br.ufrn.imd.business.TagService+.*(..))
          || execution(br.ufrn.imd.business.TagService+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.ufrn.imd.business.TagService..*+.*(..))
          || execution(br.ufrn.imd.business.TagService..*+.new(..))
          || execution( * br.ufrn.imd.business.TagService+.*(..))
          || execution(br.ufrn.imd.business.TagService+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to recover checked exceptions. *
  *  This is based on the exception introduction pattern by Laddad. */
  after(final br.ufrn.imd.business.TransactionService object$rac) throwing(JMLInternalRuntimeException rac$e)
    throws br.ufrn.imd.exceptions.DataException : (execution(* br.ufrn.imd.business.TransactionService..*+.*(..) throws br.ufrn.imd.exceptions.DataException) ||
    execution(br.ufrn.imd.business.TransactionService..*+.new(..) throws br.ufrn.imd.exceptions.DataException) ||
execution(* br.ufrn.imd.business.TransactionService+.*(..) throws br.ufrn.imd.exceptions.DataException) ||
    execution(br.ufrn.imd.business.TransactionService+.new(..) throws br.ufrn.imd.exceptions.DataException)) && 
   target(object$rac) {
    Throwable cause = rac$e.getCause();
    if(cause instanceof br.ufrn.imd.exceptions.DataException) {
      throw (br.ufrn.imd.exceptions.DataException)cause;
    }
    JMLChecker.rethrowUncheckedException(cause);
  }
  after(final br.ufrn.imd.business.TransactionService object$rac) throwing(JMLInternalRuntimeException rac$e)
    throws br.ufrn.imd.exceptions.BusinessException : (execution(* br.ufrn.imd.business.TransactionService..*+.*(..) throws br.ufrn.imd.exceptions.BusinessException) ||
    execution(br.ufrn.imd.business.TransactionService..*+.new(..) throws br.ufrn.imd.exceptions.BusinessException) ||
execution(* br.ufrn.imd.business.TransactionService+.*(..) throws br.ufrn.imd.exceptions.BusinessException) ||
    execution(br.ufrn.imd.business.TransactionService+.new(..) throws br.ufrn.imd.exceptions.BusinessException)) && 
   target(object$rac) {
    Throwable cause = rac$e.getCause();
    if(cause instanceof br.ufrn.imd.exceptions.BusinessException) {
      throw (br.ufrn.imd.exceptions.BusinessException)cause;
    }
    JMLChecker.rethrowUncheckedException(cause);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.ufrn.imd.business.TransactionService object$rac): (execution( * br.ufrn.imd.business.TransactionService..*+.*(..))
          || execution(br.ufrn.imd.business.TransactionService..*+.new(..))
          || execution( * br.ufrn.imd.business.TransactionService+.*(..))
          || execution(br.ufrn.imd.business.TransactionService+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.ufrn.imd.business.TransactionService..*+.*(..))
          || execution(br.ufrn.imd.business.TransactionService..*+.new(..))
          || execution( * br.ufrn.imd.business.TransactionService+.*(..))
          || execution(br.ufrn.imd.business.TransactionService+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to recover checked exceptions. *
  *  This is based on the exception introduction pattern by Laddad. */
  after(final br.ufrn.imd.business.recommendation.IRecommendation object$rac) throwing(JMLInternalRuntimeException rac$e)
    throws br.ufrn.imd.exceptions.DataException : (execution(* br.ufrn.imd.business.recommendation.IRecommendation..*+.*(..) throws br.ufrn.imd.exceptions.DataException) ||
    execution(br.ufrn.imd.business.recommendation.IRecommendation..*+.new(..) throws br.ufrn.imd.exceptions.DataException) ||
execution(* br.ufrn.imd.business.recommendation.IRecommendation+.*(..) throws br.ufrn.imd.exceptions.DataException) ||
    execution(br.ufrn.imd.business.recommendation.IRecommendation+.new(..) throws br.ufrn.imd.exceptions.DataException)) && 
   target(object$rac) {
    Throwable cause = rac$e.getCause();
    if(cause instanceof br.ufrn.imd.exceptions.DataException) {
      throw (br.ufrn.imd.exceptions.DataException)cause;
    }
    JMLChecker.rethrowUncheckedException(cause);
  }
  after(final br.ufrn.imd.business.recommendation.IRecommendation object$rac) throwing(JMLInternalRuntimeException rac$e)
    throws br.ufrn.imd.exceptions.BusinessException : (execution(* br.ufrn.imd.business.recommendation.IRecommendation..*+.*(..) throws br.ufrn.imd.exceptions.BusinessException) ||
    execution(br.ufrn.imd.business.recommendation.IRecommendation..*+.new(..) throws br.ufrn.imd.exceptions.BusinessException) ||
execution(* br.ufrn.imd.business.recommendation.IRecommendation+.*(..) throws br.ufrn.imd.exceptions.BusinessException) ||
    execution(br.ufrn.imd.business.recommendation.IRecommendation+.new(..) throws br.ufrn.imd.exceptions.BusinessException)) && 
   target(object$rac) {
    Throwable cause = rac$e.getCause();
    if(cause instanceof br.ufrn.imd.exceptions.BusinessException) {
      throw (br.ufrn.imd.exceptions.BusinessException)cause;
    }
    JMLChecker.rethrowUncheckedException(cause);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.ufrn.imd.business.recommendation.IRecommendation object$rac): (execution( * br.ufrn.imd.business.recommendation.IRecommendation..*+.*(..))
          || execution(br.ufrn.imd.business.recommendation.IRecommendation..*+.new(..))
          || execution( * br.ufrn.imd.business.recommendation.IRecommendation+.*(..))
          || execution(br.ufrn.imd.business.recommendation.IRecommendation+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.ufrn.imd.business.recommendation.IRecommendation..*+.*(..))
          || execution(br.ufrn.imd.business.recommendation.IRecommendation..*+.new(..))
          || execution( * br.ufrn.imd.business.recommendation.IRecommendation+.*(..))
          || execution(br.ufrn.imd.business.recommendation.IRecommendation+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to recover checked exceptions. *
  *  This is based on the exception introduction pattern by Laddad. */
  after(final br.ufrn.imd.business.recommendation.RecommendationBook object$rac) throwing(JMLInternalRuntimeException rac$e)
    throws br.ufrn.imd.exceptions.DataException : (execution(* br.ufrn.imd.business.recommendation.RecommendationBook..*+.*(..) throws br.ufrn.imd.exceptions.DataException) ||
    execution(br.ufrn.imd.business.recommendation.RecommendationBook..*+.new(..) throws br.ufrn.imd.exceptions.DataException) ||
execution(* br.ufrn.imd.business.recommendation.RecommendationBook+.*(..) throws br.ufrn.imd.exceptions.DataException) ||
    execution(br.ufrn.imd.business.recommendation.RecommendationBook+.new(..) throws br.ufrn.imd.exceptions.DataException)) && 
   target(object$rac) {
    Throwable cause = rac$e.getCause();
    if(cause instanceof br.ufrn.imd.exceptions.DataException) {
      throw (br.ufrn.imd.exceptions.DataException)cause;
    }
    JMLChecker.rethrowUncheckedException(cause);
  }
  after(final br.ufrn.imd.business.recommendation.RecommendationBook object$rac) throwing(JMLInternalRuntimeException rac$e)
    throws br.ufrn.imd.exceptions.BusinessException : (execution(* br.ufrn.imd.business.recommendation.RecommendationBook..*+.*(..) throws br.ufrn.imd.exceptions.BusinessException) ||
    execution(br.ufrn.imd.business.recommendation.RecommendationBook..*+.new(..) throws br.ufrn.imd.exceptions.BusinessException) ||
execution(* br.ufrn.imd.business.recommendation.RecommendationBook+.*(..) throws br.ufrn.imd.exceptions.BusinessException) ||
    execution(br.ufrn.imd.business.recommendation.RecommendationBook+.new(..) throws br.ufrn.imd.exceptions.BusinessException)) && 
   target(object$rac) {
    Throwable cause = rac$e.getCause();
    if(cause instanceof br.ufrn.imd.exceptions.BusinessException) {
      throw (br.ufrn.imd.exceptions.BusinessException)cause;
    }
    JMLChecker.rethrowUncheckedException(cause);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.ufrn.imd.business.recommendation.RecommendationBook object$rac): (execution( * br.ufrn.imd.business.recommendation.RecommendationBook..*+.*(..))
          || execution(br.ufrn.imd.business.recommendation.RecommendationBook..*+.new(..))
          || execution( * br.ufrn.imd.business.recommendation.RecommendationBook+.*(..))
          || execution(br.ufrn.imd.business.recommendation.RecommendationBook+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.ufrn.imd.business.recommendation.RecommendationBook..*+.*(..))
          || execution(br.ufrn.imd.business.recommendation.RecommendationBook..*+.new(..))
          || execution( * br.ufrn.imd.business.recommendation.RecommendationBook+.*(..))
          || execution(br.ufrn.imd.business.recommendation.RecommendationBook+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to recover checked exceptions. *
  *  This is based on the exception introduction pattern by Laddad. */
  after(final br.ufrn.imd.business.recommendation.RecommendationGame object$rac) throwing(JMLInternalRuntimeException rac$e)
    throws br.ufrn.imd.exceptions.DataException : (execution(* br.ufrn.imd.business.recommendation.RecommendationGame..*+.*(..) throws br.ufrn.imd.exceptions.DataException) ||
    execution(br.ufrn.imd.business.recommendation.RecommendationGame..*+.new(..) throws br.ufrn.imd.exceptions.DataException) ||
execution(* br.ufrn.imd.business.recommendation.RecommendationGame+.*(..) throws br.ufrn.imd.exceptions.DataException) ||
    execution(br.ufrn.imd.business.recommendation.RecommendationGame+.new(..) throws br.ufrn.imd.exceptions.DataException)) && 
   target(object$rac) {
    Throwable cause = rac$e.getCause();
    if(cause instanceof br.ufrn.imd.exceptions.DataException) {
      throw (br.ufrn.imd.exceptions.DataException)cause;
    }
    JMLChecker.rethrowUncheckedException(cause);
  }
  after(final br.ufrn.imd.business.recommendation.RecommendationGame object$rac) throwing(JMLInternalRuntimeException rac$e)
    throws br.ufrn.imd.exceptions.BusinessException : (execution(* br.ufrn.imd.business.recommendation.RecommendationGame..*+.*(..) throws br.ufrn.imd.exceptions.BusinessException) ||
    execution(br.ufrn.imd.business.recommendation.RecommendationGame..*+.new(..) throws br.ufrn.imd.exceptions.BusinessException) ||
execution(* br.ufrn.imd.business.recommendation.RecommendationGame+.*(..) throws br.ufrn.imd.exceptions.BusinessException) ||
    execution(br.ufrn.imd.business.recommendation.RecommendationGame+.new(..) throws br.ufrn.imd.exceptions.BusinessException)) && 
   target(object$rac) {
    Throwable cause = rac$e.getCause();
    if(cause instanceof br.ufrn.imd.exceptions.BusinessException) {
      throw (br.ufrn.imd.exceptions.BusinessException)cause;
    }
    JMLChecker.rethrowUncheckedException(cause);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.ufrn.imd.business.recommendation.RecommendationGame object$rac): (execution( * br.ufrn.imd.business.recommendation.RecommendationGame..*+.*(..))
          || execution(br.ufrn.imd.business.recommendation.RecommendationGame..*+.new(..))
          || execution( * br.ufrn.imd.business.recommendation.RecommendationGame+.*(..))
          || execution(br.ufrn.imd.business.recommendation.RecommendationGame+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.ufrn.imd.business.recommendation.RecommendationGame..*+.*(..))
          || execution(br.ufrn.imd.business.recommendation.RecommendationGame..*+.new(..))
          || execution( * br.ufrn.imd.business.recommendation.RecommendationGame+.*(..))
          || execution(br.ufrn.imd.business.recommendation.RecommendationGame+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to recover checked exceptions. *
  *  This is based on the exception introduction pattern by Laddad. */
  after(final br.ufrn.imd.business.recommendation.RecommendationVinyl object$rac) throwing(JMLInternalRuntimeException rac$e)
    throws br.ufrn.imd.exceptions.DataException : (execution(* br.ufrn.imd.business.recommendation.RecommendationVinyl..*+.*(..) throws br.ufrn.imd.exceptions.DataException) ||
    execution(br.ufrn.imd.business.recommendation.RecommendationVinyl..*+.new(..) throws br.ufrn.imd.exceptions.DataException) ||
execution(* br.ufrn.imd.business.recommendation.RecommendationVinyl+.*(..) throws br.ufrn.imd.exceptions.DataException) ||
    execution(br.ufrn.imd.business.recommendation.RecommendationVinyl+.new(..) throws br.ufrn.imd.exceptions.DataException)) && 
   target(object$rac) {
    Throwable cause = rac$e.getCause();
    if(cause instanceof br.ufrn.imd.exceptions.DataException) {
      throw (br.ufrn.imd.exceptions.DataException)cause;
    }
    JMLChecker.rethrowUncheckedException(cause);
  }
  after(final br.ufrn.imd.business.recommendation.RecommendationVinyl object$rac) throwing(JMLInternalRuntimeException rac$e)
    throws br.ufrn.imd.exceptions.BusinessException : (execution(* br.ufrn.imd.business.recommendation.RecommendationVinyl..*+.*(..) throws br.ufrn.imd.exceptions.BusinessException) ||
    execution(br.ufrn.imd.business.recommendation.RecommendationVinyl..*+.new(..) throws br.ufrn.imd.exceptions.BusinessException) ||
execution(* br.ufrn.imd.business.recommendation.RecommendationVinyl+.*(..) throws br.ufrn.imd.exceptions.BusinessException) ||
    execution(br.ufrn.imd.business.recommendation.RecommendationVinyl+.new(..) throws br.ufrn.imd.exceptions.BusinessException)) && 
   target(object$rac) {
    Throwable cause = rac$e.getCause();
    if(cause instanceof br.ufrn.imd.exceptions.BusinessException) {
      throw (br.ufrn.imd.exceptions.BusinessException)cause;
    }
    JMLChecker.rethrowUncheckedException(cause);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.ufrn.imd.business.recommendation.RecommendationVinyl object$rac): (execution( * br.ufrn.imd.business.recommendation.RecommendationVinyl..*+.*(..))
          || execution(br.ufrn.imd.business.recommendation.RecommendationVinyl..*+.new(..))
          || execution( * br.ufrn.imd.business.recommendation.RecommendationVinyl+.*(..))
          || execution(br.ufrn.imd.business.recommendation.RecommendationVinyl+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.ufrn.imd.business.recommendation.RecommendationVinyl..*+.*(..))
          || execution(br.ufrn.imd.business.recommendation.RecommendationVinyl..*+.new(..))
          || execution( * br.ufrn.imd.business.recommendation.RecommendationVinyl+.*(..))
          || execution(br.ufrn.imd.business.recommendation.RecommendationVinyl+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to recover checked exceptions. *
  *  This is based on the exception introduction pattern by Laddad. */
  after(final br.ufrn.imd.controller.TelaAvisoController object$rac) throwing(JMLInternalRuntimeException rac$e)
    throws java.io.IOException : (execution(* br.ufrn.imd.controller.TelaAvisoController..*+.*(..) throws java.io.IOException) ||
    execution(br.ufrn.imd.controller.TelaAvisoController..*+.new(..) throws java.io.IOException) ||
execution(* br.ufrn.imd.controller.TelaAvisoController+.*(..) throws java.io.IOException) ||
    execution(br.ufrn.imd.controller.TelaAvisoController+.new(..) throws java.io.IOException)) && 
   target(object$rac) {
    Throwable cause = rac$e.getCause();
    if(cause instanceof java.io.IOException) {
      throw (java.io.IOException)cause;
    }
    JMLChecker.rethrowUncheckedException(cause);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.ufrn.imd.controller.TelaAvisoController object$rac): (execution( * br.ufrn.imd.controller.TelaAvisoController..*+.*(..))
          || execution(br.ufrn.imd.controller.TelaAvisoController..*+.new(..))
          || execution( * br.ufrn.imd.controller.TelaAvisoController+.*(..))
          || execution(br.ufrn.imd.controller.TelaAvisoController+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.ufrn.imd.controller.TelaAvisoController..*+.*(..))
          || execution(br.ufrn.imd.controller.TelaAvisoController..*+.new(..))
          || execution( * br.ufrn.imd.controller.TelaAvisoController+.*(..))
          || execution(br.ufrn.imd.controller.TelaAvisoController+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.ufrn.imd.controller.TelaPagamentoCartaoController object$rac): (execution( * br.ufrn.imd.controller.TelaPagamentoCartaoController..*+.*(..))
          || execution(br.ufrn.imd.controller.TelaPagamentoCartaoController..*+.new(..))
          || execution( * br.ufrn.imd.controller.TelaPagamentoCartaoController+.*(..))
          || execution(br.ufrn.imd.controller.TelaPagamentoCartaoController+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.ufrn.imd.controller.TelaPagamentoCartaoController..*+.*(..))
          || execution(br.ufrn.imd.controller.TelaPagamentoCartaoController..*+.new(..))
          || execution( * br.ufrn.imd.controller.TelaPagamentoCartaoController+.*(..))
          || execution(br.ufrn.imd.controller.TelaPagamentoCartaoController+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.ufrn.imd.controller.TelaPagamentoController object$rac): (execution( * br.ufrn.imd.controller.TelaPagamentoController..*+.*(..))
          || execution(br.ufrn.imd.controller.TelaPagamentoController..*+.new(..))
          || execution( * br.ufrn.imd.controller.TelaPagamentoController+.*(..))
          || execution(br.ufrn.imd.controller.TelaPagamentoController+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.ufrn.imd.controller.TelaPagamentoController..*+.*(..))
          || execution(br.ufrn.imd.controller.TelaPagamentoController..*+.new(..))
          || execution( * br.ufrn.imd.controller.TelaPagamentoController+.*(..))
          || execution(br.ufrn.imd.controller.TelaPagamentoController+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.ufrn.imd.controller.TelaPagamentoDinheiroController object$rac): (execution( * br.ufrn.imd.controller.TelaPagamentoDinheiroController..*+.*(..))
          || execution(br.ufrn.imd.controller.TelaPagamentoDinheiroController..*+.new(..))
          || execution( * br.ufrn.imd.controller.TelaPagamentoDinheiroController+.*(..))
          || execution(br.ufrn.imd.controller.TelaPagamentoDinheiroController+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.ufrn.imd.controller.TelaPagamentoDinheiroController..*+.*(..))
          || execution(br.ufrn.imd.controller.TelaPagamentoDinheiroController..*+.new(..))
          || execution( * br.ufrn.imd.controller.TelaPagamentoDinheiroController+.*(..))
          || execution(br.ufrn.imd.controller.TelaPagamentoDinheiroController+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.ufrn.imd.controller.TelaPagamentoPixController object$rac): (execution( * br.ufrn.imd.controller.TelaPagamentoPixController..*+.*(..))
          || execution(br.ufrn.imd.controller.TelaPagamentoPixController..*+.new(..))
          || execution( * br.ufrn.imd.controller.TelaPagamentoPixController+.*(..))
          || execution(br.ufrn.imd.controller.TelaPagamentoPixController+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.ufrn.imd.controller.TelaPagamentoPixController..*+.*(..))
          || execution(br.ufrn.imd.controller.TelaPagamentoPixController..*+.new(..))
          || execution( * br.ufrn.imd.controller.TelaPagamentoPixController+.*(..))
          || execution(br.ufrn.imd.controller.TelaPagamentoPixController+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to recover checked exceptions. *
  *  This is based on the exception introduction pattern by Laddad. */
  after(final br.ufrn.imd.controller.TelaPrincipalController object$rac) throwing(JMLInternalRuntimeException rac$e)
    throws br.ufrn.imd.exceptions.DataException : (execution(* br.ufrn.imd.controller.TelaPrincipalController..*+.*(..) throws br.ufrn.imd.exceptions.DataException) ||
    execution(br.ufrn.imd.controller.TelaPrincipalController..*+.new(..) throws br.ufrn.imd.exceptions.DataException) ||
execution(* br.ufrn.imd.controller.TelaPrincipalController+.*(..) throws br.ufrn.imd.exceptions.DataException) ||
    execution(br.ufrn.imd.controller.TelaPrincipalController+.new(..) throws br.ufrn.imd.exceptions.DataException)) && 
   target(object$rac) {
    Throwable cause = rac$e.getCause();
    if(cause instanceof br.ufrn.imd.exceptions.DataException) {
      throw (br.ufrn.imd.exceptions.DataException)cause;
    }
    JMLChecker.rethrowUncheckedException(cause);
  }
  after(final br.ufrn.imd.controller.TelaPrincipalController object$rac) throwing(JMLInternalRuntimeException rac$e)
    throws br.ufrn.imd.exceptions.BusinessException : (execution(* br.ufrn.imd.controller.TelaPrincipalController..*+.*(..) throws br.ufrn.imd.exceptions.BusinessException) ||
    execution(br.ufrn.imd.controller.TelaPrincipalController..*+.new(..) throws br.ufrn.imd.exceptions.BusinessException) ||
execution(* br.ufrn.imd.controller.TelaPrincipalController+.*(..) throws br.ufrn.imd.exceptions.BusinessException) ||
    execution(br.ufrn.imd.controller.TelaPrincipalController+.new(..) throws br.ufrn.imd.exceptions.BusinessException)) && 
   target(object$rac) {
    Throwable cause = rac$e.getCause();
    if(cause instanceof br.ufrn.imd.exceptions.BusinessException) {
      throw (br.ufrn.imd.exceptions.BusinessException)cause;
    }
    JMLChecker.rethrowUncheckedException(cause);
  }
  after(final br.ufrn.imd.controller.TelaPrincipalController object$rac) throwing(JMLInternalRuntimeException rac$e)
    throws java.io.IOException : (execution(* br.ufrn.imd.controller.TelaPrincipalController..*+.*(..) throws java.io.IOException) ||
    execution(br.ufrn.imd.controller.TelaPrincipalController..*+.new(..) throws java.io.IOException) ||
execution(* br.ufrn.imd.controller.TelaPrincipalController+.*(..) throws java.io.IOException) ||
    execution(br.ufrn.imd.controller.TelaPrincipalController+.new(..) throws java.io.IOException)) && 
   target(object$rac) {
    Throwable cause = rac$e.getCause();
    if(cause instanceof java.io.IOException) {
      throw (java.io.IOException)cause;
    }
    JMLChecker.rethrowUncheckedException(cause);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.ufrn.imd.controller.TelaPrincipalController object$rac): (execution( * br.ufrn.imd.controller.TelaPrincipalController..*+.*(..))
          || execution(br.ufrn.imd.controller.TelaPrincipalController..*+.new(..))
          || execution( * br.ufrn.imd.controller.TelaPrincipalController+.*(..))
          || execution(br.ufrn.imd.controller.TelaPrincipalController+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.ufrn.imd.controller.TelaPrincipalController..*+.*(..))
          || execution(br.ufrn.imd.controller.TelaPrincipalController..*+.new(..))
          || execution( * br.ufrn.imd.controller.TelaPrincipalController+.*(..))
          || execution(br.ufrn.imd.controller.TelaPrincipalController+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.ufrn.imd.controller.add.TelaCadastroClienteController object$rac): (execution( * br.ufrn.imd.controller.add.TelaCadastroClienteController..*+.*(..))
          || execution(br.ufrn.imd.controller.add.TelaCadastroClienteController..*+.new(..))
          || execution( * br.ufrn.imd.controller.add.TelaCadastroClienteController+.*(..))
          || execution(br.ufrn.imd.controller.add.TelaCadastroClienteController+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.ufrn.imd.controller.add.TelaCadastroClienteController..*+.*(..))
          || execution(br.ufrn.imd.controller.add.TelaCadastroClienteController..*+.new(..))
          || execution( * br.ufrn.imd.controller.add.TelaCadastroClienteController+.*(..))
          || execution(br.ufrn.imd.controller.add.TelaCadastroClienteController+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to recover checked exceptions. *
  *  This is based on the exception introduction pattern by Laddad. */
  after(final br.ufrn.imd.controller.add.TelaCadastroJogoController object$rac) throwing(JMLInternalRuntimeException rac$e)
    throws br.ufrn.imd.exceptions.BusinessException : (execution(* br.ufrn.imd.controller.add.TelaCadastroJogoController..*+.*(..) throws br.ufrn.imd.exceptions.BusinessException) ||
    execution(br.ufrn.imd.controller.add.TelaCadastroJogoController..*+.new(..) throws br.ufrn.imd.exceptions.BusinessException) ||
execution(* br.ufrn.imd.controller.add.TelaCadastroJogoController+.*(..) throws br.ufrn.imd.exceptions.BusinessException) ||
    execution(br.ufrn.imd.controller.add.TelaCadastroJogoController+.new(..) throws br.ufrn.imd.exceptions.BusinessException)) && 
   target(object$rac) {
    Throwable cause = rac$e.getCause();
    if(cause instanceof br.ufrn.imd.exceptions.BusinessException) {
      throw (br.ufrn.imd.exceptions.BusinessException)cause;
    }
    JMLChecker.rethrowUncheckedException(cause);
  }
  after(final br.ufrn.imd.controller.add.TelaCadastroJogoController object$rac) throwing(JMLInternalRuntimeException rac$e)
    throws br.ufrn.imd.exceptions.DataException : (execution(* br.ufrn.imd.controller.add.TelaCadastroJogoController..*+.*(..) throws br.ufrn.imd.exceptions.DataException) ||
    execution(br.ufrn.imd.controller.add.TelaCadastroJogoController..*+.new(..) throws br.ufrn.imd.exceptions.DataException) ||
execution(* br.ufrn.imd.controller.add.TelaCadastroJogoController+.*(..) throws br.ufrn.imd.exceptions.DataException) ||
    execution(br.ufrn.imd.controller.add.TelaCadastroJogoController+.new(..) throws br.ufrn.imd.exceptions.DataException)) && 
   target(object$rac) {
    Throwable cause = rac$e.getCause();
    if(cause instanceof br.ufrn.imd.exceptions.DataException) {
      throw (br.ufrn.imd.exceptions.DataException)cause;
    }
    JMLChecker.rethrowUncheckedException(cause);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.ufrn.imd.controller.add.TelaCadastroJogoController object$rac): (execution( * br.ufrn.imd.controller.add.TelaCadastroJogoController..*+.*(..))
          || execution(br.ufrn.imd.controller.add.TelaCadastroJogoController..*+.new(..))
          || execution( * br.ufrn.imd.controller.add.TelaCadastroJogoController+.*(..))
          || execution(br.ufrn.imd.controller.add.TelaCadastroJogoController+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.ufrn.imd.controller.add.TelaCadastroJogoController..*+.*(..))
          || execution(br.ufrn.imd.controller.add.TelaCadastroJogoController..*+.new(..))
          || execution( * br.ufrn.imd.controller.add.TelaCadastroJogoController+.*(..))
          || execution(br.ufrn.imd.controller.add.TelaCadastroJogoController+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to recover checked exceptions. *
  *  This is based on the exception introduction pattern by Laddad. */
  after(final br.ufrn.imd.controller.add.TelaCadastroLivroController object$rac) throwing(JMLInternalRuntimeException rac$e)
    throws br.ufrn.imd.exceptions.BusinessException : (execution(* br.ufrn.imd.controller.add.TelaCadastroLivroController..*+.*(..) throws br.ufrn.imd.exceptions.BusinessException) ||
    execution(br.ufrn.imd.controller.add.TelaCadastroLivroController..*+.new(..) throws br.ufrn.imd.exceptions.BusinessException) ||
execution(* br.ufrn.imd.controller.add.TelaCadastroLivroController+.*(..) throws br.ufrn.imd.exceptions.BusinessException) ||
    execution(br.ufrn.imd.controller.add.TelaCadastroLivroController+.new(..) throws br.ufrn.imd.exceptions.BusinessException)) && 
   target(object$rac) {
    Throwable cause = rac$e.getCause();
    if(cause instanceof br.ufrn.imd.exceptions.BusinessException) {
      throw (br.ufrn.imd.exceptions.BusinessException)cause;
    }
    JMLChecker.rethrowUncheckedException(cause);
  }
  after(final br.ufrn.imd.controller.add.TelaCadastroLivroController object$rac) throwing(JMLInternalRuntimeException rac$e)
    throws br.ufrn.imd.exceptions.DataException : (execution(* br.ufrn.imd.controller.add.TelaCadastroLivroController..*+.*(..) throws br.ufrn.imd.exceptions.DataException) ||
    execution(br.ufrn.imd.controller.add.TelaCadastroLivroController..*+.new(..) throws br.ufrn.imd.exceptions.DataException) ||
execution(* br.ufrn.imd.controller.add.TelaCadastroLivroController+.*(..) throws br.ufrn.imd.exceptions.DataException) ||
    execution(br.ufrn.imd.controller.add.TelaCadastroLivroController+.new(..) throws br.ufrn.imd.exceptions.DataException)) && 
   target(object$rac) {
    Throwable cause = rac$e.getCause();
    if(cause instanceof br.ufrn.imd.exceptions.DataException) {
      throw (br.ufrn.imd.exceptions.DataException)cause;
    }
    JMLChecker.rethrowUncheckedException(cause);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.ufrn.imd.controller.add.TelaCadastroLivroController object$rac): (execution( * br.ufrn.imd.controller.add.TelaCadastroLivroController..*+.*(..))
          || execution(br.ufrn.imd.controller.add.TelaCadastroLivroController..*+.new(..))
          || execution( * br.ufrn.imd.controller.add.TelaCadastroLivroController+.*(..))
          || execution(br.ufrn.imd.controller.add.TelaCadastroLivroController+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.ufrn.imd.controller.add.TelaCadastroLivroController..*+.*(..))
          || execution(br.ufrn.imd.controller.add.TelaCadastroLivroController..*+.new(..))
          || execution( * br.ufrn.imd.controller.add.TelaCadastroLivroController+.*(..))
          || execution(br.ufrn.imd.controller.add.TelaCadastroLivroController+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.ufrn.imd.controller.add.TelaCadastroProdutoController object$rac): (execution( * br.ufrn.imd.controller.add.TelaCadastroProdutoController..*+.*(..))
          || execution(br.ufrn.imd.controller.add.TelaCadastroProdutoController..*+.new(..))
          || execution( * br.ufrn.imd.controller.add.TelaCadastroProdutoController+.*(..))
          || execution(br.ufrn.imd.controller.add.TelaCadastroProdutoController+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.ufrn.imd.controller.add.TelaCadastroProdutoController..*+.*(..))
          || execution(br.ufrn.imd.controller.add.TelaCadastroProdutoController..*+.new(..))
          || execution( * br.ufrn.imd.controller.add.TelaCadastroProdutoController+.*(..))
          || execution(br.ufrn.imd.controller.add.TelaCadastroProdutoController+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.ufrn.imd.controller.add.TelaCadastroTagController object$rac): (execution( * br.ufrn.imd.controller.add.TelaCadastroTagController..*+.*(..))
          || execution(br.ufrn.imd.controller.add.TelaCadastroTagController..*+.new(..))
          || execution( * br.ufrn.imd.controller.add.TelaCadastroTagController+.*(..))
          || execution(br.ufrn.imd.controller.add.TelaCadastroTagController+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.ufrn.imd.controller.add.TelaCadastroTagController..*+.*(..))
          || execution(br.ufrn.imd.controller.add.TelaCadastroTagController..*+.new(..))
          || execution( * br.ufrn.imd.controller.add.TelaCadastroTagController+.*(..))
          || execution(br.ufrn.imd.controller.add.TelaCadastroTagController+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to recover checked exceptions. *
  *  This is based on the exception introduction pattern by Laddad. */
  after(final br.ufrn.imd.controller.add.TelaCadastroVinilController object$rac) throwing(JMLInternalRuntimeException rac$e)
    throws br.ufrn.imd.exceptions.BusinessException : (execution(* br.ufrn.imd.controller.add.TelaCadastroVinilController..*+.*(..) throws br.ufrn.imd.exceptions.BusinessException) ||
    execution(br.ufrn.imd.controller.add.TelaCadastroVinilController..*+.new(..) throws br.ufrn.imd.exceptions.BusinessException) ||
execution(* br.ufrn.imd.controller.add.TelaCadastroVinilController+.*(..) throws br.ufrn.imd.exceptions.BusinessException) ||
    execution(br.ufrn.imd.controller.add.TelaCadastroVinilController+.new(..) throws br.ufrn.imd.exceptions.BusinessException)) && 
   target(object$rac) {
    Throwable cause = rac$e.getCause();
    if(cause instanceof br.ufrn.imd.exceptions.BusinessException) {
      throw (br.ufrn.imd.exceptions.BusinessException)cause;
    }
    JMLChecker.rethrowUncheckedException(cause);
  }
  after(final br.ufrn.imd.controller.add.TelaCadastroVinilController object$rac) throwing(JMLInternalRuntimeException rac$e)
    throws br.ufrn.imd.exceptions.DataException : (execution(* br.ufrn.imd.controller.add.TelaCadastroVinilController..*+.*(..) throws br.ufrn.imd.exceptions.DataException) ||
    execution(br.ufrn.imd.controller.add.TelaCadastroVinilController..*+.new(..) throws br.ufrn.imd.exceptions.DataException) ||
execution(* br.ufrn.imd.controller.add.TelaCadastroVinilController+.*(..) throws br.ufrn.imd.exceptions.DataException) ||
    execution(br.ufrn.imd.controller.add.TelaCadastroVinilController+.new(..) throws br.ufrn.imd.exceptions.DataException)) && 
   target(object$rac) {
    Throwable cause = rac$e.getCause();
    if(cause instanceof br.ufrn.imd.exceptions.DataException) {
      throw (br.ufrn.imd.exceptions.DataException)cause;
    }
    JMLChecker.rethrowUncheckedException(cause);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.ufrn.imd.controller.add.TelaCadastroVinilController object$rac): (execution( * br.ufrn.imd.controller.add.TelaCadastroVinilController..*+.*(..))
          || execution(br.ufrn.imd.controller.add.TelaCadastroVinilController..*+.new(..))
          || execution( * br.ufrn.imd.controller.add.TelaCadastroVinilController+.*(..))
          || execution(br.ufrn.imd.controller.add.TelaCadastroVinilController+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.ufrn.imd.controller.add.TelaCadastroVinilController..*+.*(..))
          || execution(br.ufrn.imd.controller.add.TelaCadastroVinilController..*+.new(..))
          || execution( * br.ufrn.imd.controller.add.TelaCadastroVinilController+.*(..))
          || execution(br.ufrn.imd.controller.add.TelaCadastroVinilController+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to recover checked exceptions. *
  *  This is based on the exception introduction pattern by Laddad. */
  after(final br.ufrn.imd.controller.list.TelaListagemClientesController object$rac) throwing(JMLInternalRuntimeException rac$e)
    throws br.ufrn.imd.exceptions.DataException : (execution(* br.ufrn.imd.controller.list.TelaListagemClientesController..*+.*(..) throws br.ufrn.imd.exceptions.DataException) ||
    execution(br.ufrn.imd.controller.list.TelaListagemClientesController..*+.new(..) throws br.ufrn.imd.exceptions.DataException) ||
execution(* br.ufrn.imd.controller.list.TelaListagemClientesController+.*(..) throws br.ufrn.imd.exceptions.DataException) ||
    execution(br.ufrn.imd.controller.list.TelaListagemClientesController+.new(..) throws br.ufrn.imd.exceptions.DataException)) && 
   target(object$rac) {
    Throwable cause = rac$e.getCause();
    if(cause instanceof br.ufrn.imd.exceptions.DataException) {
      throw (br.ufrn.imd.exceptions.DataException)cause;
    }
    JMLChecker.rethrowUncheckedException(cause);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.ufrn.imd.controller.list.TelaListagemClientesController object$rac): (execution( * br.ufrn.imd.controller.list.TelaListagemClientesController..*+.*(..))
          || execution(br.ufrn.imd.controller.list.TelaListagemClientesController..*+.new(..))
          || execution( * br.ufrn.imd.controller.list.TelaListagemClientesController+.*(..))
          || execution(br.ufrn.imd.controller.list.TelaListagemClientesController+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.ufrn.imd.controller.list.TelaListagemClientesController..*+.*(..))
          || execution(br.ufrn.imd.controller.list.TelaListagemClientesController..*+.new(..))
          || execution( * br.ufrn.imd.controller.list.TelaListagemClientesController+.*(..))
          || execution(br.ufrn.imd.controller.list.TelaListagemClientesController+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.ufrn.imd.controller.list.TelaListagemJogosController object$rac): (execution( * br.ufrn.imd.controller.list.TelaListagemJogosController..*+.*(..))
          || execution(br.ufrn.imd.controller.list.TelaListagemJogosController..*+.new(..))
          || execution( * br.ufrn.imd.controller.list.TelaListagemJogosController+.*(..))
          || execution(br.ufrn.imd.controller.list.TelaListagemJogosController+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.ufrn.imd.controller.list.TelaListagemJogosController..*+.*(..))
          || execution(br.ufrn.imd.controller.list.TelaListagemJogosController..*+.new(..))
          || execution( * br.ufrn.imd.controller.list.TelaListagemJogosController+.*(..))
          || execution(br.ufrn.imd.controller.list.TelaListagemJogosController+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.ufrn.imd.controller.list.TelaListagemLivrosController object$rac): (execution( * br.ufrn.imd.controller.list.TelaListagemLivrosController..*+.*(..))
          || execution(br.ufrn.imd.controller.list.TelaListagemLivrosController..*+.new(..))
          || execution( * br.ufrn.imd.controller.list.TelaListagemLivrosController+.*(..))
          || execution(br.ufrn.imd.controller.list.TelaListagemLivrosController+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.ufrn.imd.controller.list.TelaListagemLivrosController..*+.*(..))
          || execution(br.ufrn.imd.controller.list.TelaListagemLivrosController..*+.new(..))
          || execution( * br.ufrn.imd.controller.list.TelaListagemLivrosController+.*(..))
          || execution(br.ufrn.imd.controller.list.TelaListagemLivrosController+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.ufrn.imd.controller.list.TelaListagemProdutosController object$rac): (execution( * br.ufrn.imd.controller.list.TelaListagemProdutosController..*+.*(..))
          || execution(br.ufrn.imd.controller.list.TelaListagemProdutosController..*+.new(..))
          || execution( * br.ufrn.imd.controller.list.TelaListagemProdutosController+.*(..))
          || execution(br.ufrn.imd.controller.list.TelaListagemProdutosController+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.ufrn.imd.controller.list.TelaListagemProdutosController..*+.*(..))
          || execution(br.ufrn.imd.controller.list.TelaListagemProdutosController..*+.new(..))
          || execution( * br.ufrn.imd.controller.list.TelaListagemProdutosController+.*(..))
          || execution(br.ufrn.imd.controller.list.TelaListagemProdutosController+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.ufrn.imd.controller.list.TelaListagemTagsController object$rac): (execution( * br.ufrn.imd.controller.list.TelaListagemTagsController..*+.*(..))
          || execution(br.ufrn.imd.controller.list.TelaListagemTagsController..*+.new(..))
          || execution( * br.ufrn.imd.controller.list.TelaListagemTagsController+.*(..))
          || execution(br.ufrn.imd.controller.list.TelaListagemTagsController+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.ufrn.imd.controller.list.TelaListagemTagsController..*+.*(..))
          || execution(br.ufrn.imd.controller.list.TelaListagemTagsController..*+.new(..))
          || execution( * br.ufrn.imd.controller.list.TelaListagemTagsController+.*(..))
          || execution(br.ufrn.imd.controller.list.TelaListagemTagsController+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.ufrn.imd.controller.list.TelaListagemVendasController object$rac): (execution( * br.ufrn.imd.controller.list.TelaListagemVendasController..*+.*(..))
          || execution(br.ufrn.imd.controller.list.TelaListagemVendasController..*+.new(..))
          || execution( * br.ufrn.imd.controller.list.TelaListagemVendasController+.*(..))
          || execution(br.ufrn.imd.controller.list.TelaListagemVendasController+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.ufrn.imd.controller.list.TelaListagemVendasController..*+.*(..))
          || execution(br.ufrn.imd.controller.list.TelaListagemVendasController..*+.new(..))
          || execution( * br.ufrn.imd.controller.list.TelaListagemVendasController+.*(..))
          || execution(br.ufrn.imd.controller.list.TelaListagemVendasController+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.ufrn.imd.controller.list.TelaListagemVinisController object$rac): (execution( * br.ufrn.imd.controller.list.TelaListagemVinisController..*+.*(..))
          || execution(br.ufrn.imd.controller.list.TelaListagemVinisController..*+.new(..))
          || execution( * br.ufrn.imd.controller.list.TelaListagemVinisController+.*(..))
          || execution(br.ufrn.imd.controller.list.TelaListagemVinisController+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.ufrn.imd.controller.list.TelaListagemVinisController..*+.*(..))
          || execution(br.ufrn.imd.controller.list.TelaListagemVinisController..*+.new(..))
          || execution( * br.ufrn.imd.controller.list.TelaListagemVinisController+.*(..))
          || execution(br.ufrn.imd.controller.list.TelaListagemVinisController+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.ufrn.imd.controller.recommendation.TelaRecomendacaoJogoController object$rac): (execution( * br.ufrn.imd.controller.recommendation.TelaRecomendacaoJogoController..*+.*(..))
          || execution(br.ufrn.imd.controller.recommendation.TelaRecomendacaoJogoController..*+.new(..))
          || execution( * br.ufrn.imd.controller.recommendation.TelaRecomendacaoJogoController+.*(..))
          || execution(br.ufrn.imd.controller.recommendation.TelaRecomendacaoJogoController+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.ufrn.imd.controller.recommendation.TelaRecomendacaoJogoController..*+.*(..))
          || execution(br.ufrn.imd.controller.recommendation.TelaRecomendacaoJogoController..*+.new(..))
          || execution( * br.ufrn.imd.controller.recommendation.TelaRecomendacaoJogoController+.*(..))
          || execution(br.ufrn.imd.controller.recommendation.TelaRecomendacaoJogoController+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.ufrn.imd.controller.recommendation.TelaRecomendacaoLivroController object$rac): (execution( * br.ufrn.imd.controller.recommendation.TelaRecomendacaoLivroController..*+.*(..))
          || execution(br.ufrn.imd.controller.recommendation.TelaRecomendacaoLivroController..*+.new(..))
          || execution( * br.ufrn.imd.controller.recommendation.TelaRecomendacaoLivroController+.*(..))
          || execution(br.ufrn.imd.controller.recommendation.TelaRecomendacaoLivroController+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.ufrn.imd.controller.recommendation.TelaRecomendacaoLivroController..*+.*(..))
          || execution(br.ufrn.imd.controller.recommendation.TelaRecomendacaoLivroController..*+.new(..))
          || execution( * br.ufrn.imd.controller.recommendation.TelaRecomendacaoLivroController+.*(..))
          || execution(br.ufrn.imd.controller.recommendation.TelaRecomendacaoLivroController+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.ufrn.imd.controller.recommendation.TelaRecomendacaoVinilController object$rac): (execution( * br.ufrn.imd.controller.recommendation.TelaRecomendacaoVinilController..*+.*(..))
          || execution(br.ufrn.imd.controller.recommendation.TelaRecomendacaoVinilController..*+.new(..))
          || execution( * br.ufrn.imd.controller.recommendation.TelaRecomendacaoVinilController+.*(..))
          || execution(br.ufrn.imd.controller.recommendation.TelaRecomendacaoVinilController+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.ufrn.imd.controller.recommendation.TelaRecomendacaoVinilController..*+.*(..))
          || execution(br.ufrn.imd.controller.recommendation.TelaRecomendacaoVinilController..*+.new(..))
          || execution( * br.ufrn.imd.controller.recommendation.TelaRecomendacaoVinilController+.*(..))
          || execution(br.ufrn.imd.controller.recommendation.TelaRecomendacaoVinilController+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.ufrn.imd.controller.remove.TelaRemoverClienteController object$rac): (execution( * br.ufrn.imd.controller.remove.TelaRemoverClienteController..*+.*(..))
          || execution(br.ufrn.imd.controller.remove.TelaRemoverClienteController..*+.new(..))
          || execution( * br.ufrn.imd.controller.remove.TelaRemoverClienteController+.*(..))
          || execution(br.ufrn.imd.controller.remove.TelaRemoverClienteController+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.ufrn.imd.controller.remove.TelaRemoverClienteController..*+.*(..))
          || execution(br.ufrn.imd.controller.remove.TelaRemoverClienteController..*+.new(..))
          || execution( * br.ufrn.imd.controller.remove.TelaRemoverClienteController+.*(..))
          || execution(br.ufrn.imd.controller.remove.TelaRemoverClienteController+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.ufrn.imd.controller.remove.TelaRemoverJogoController object$rac): (execution( * br.ufrn.imd.controller.remove.TelaRemoverJogoController..*+.*(..))
          || execution(br.ufrn.imd.controller.remove.TelaRemoverJogoController..*+.new(..))
          || execution( * br.ufrn.imd.controller.remove.TelaRemoverJogoController+.*(..))
          || execution(br.ufrn.imd.controller.remove.TelaRemoverJogoController+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.ufrn.imd.controller.remove.TelaRemoverJogoController..*+.*(..))
          || execution(br.ufrn.imd.controller.remove.TelaRemoverJogoController..*+.new(..))
          || execution( * br.ufrn.imd.controller.remove.TelaRemoverJogoController+.*(..))
          || execution(br.ufrn.imd.controller.remove.TelaRemoverJogoController+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.ufrn.imd.controller.remove.TelaRemoverLivroController object$rac): (execution( * br.ufrn.imd.controller.remove.TelaRemoverLivroController..*+.*(..))
          || execution(br.ufrn.imd.controller.remove.TelaRemoverLivroController..*+.new(..))
          || execution( * br.ufrn.imd.controller.remove.TelaRemoverLivroController+.*(..))
          || execution(br.ufrn.imd.controller.remove.TelaRemoverLivroController+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.ufrn.imd.controller.remove.TelaRemoverLivroController..*+.*(..))
          || execution(br.ufrn.imd.controller.remove.TelaRemoverLivroController..*+.new(..))
          || execution( * br.ufrn.imd.controller.remove.TelaRemoverLivroController+.*(..))
          || execution(br.ufrn.imd.controller.remove.TelaRemoverLivroController+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.ufrn.imd.controller.remove.TelaRemoverProdutoController object$rac): (execution( * br.ufrn.imd.controller.remove.TelaRemoverProdutoController..*+.*(..))
          || execution(br.ufrn.imd.controller.remove.TelaRemoverProdutoController..*+.new(..))
          || execution( * br.ufrn.imd.controller.remove.TelaRemoverProdutoController+.*(..))
          || execution(br.ufrn.imd.controller.remove.TelaRemoverProdutoController+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.ufrn.imd.controller.remove.TelaRemoverProdutoController..*+.*(..))
          || execution(br.ufrn.imd.controller.remove.TelaRemoverProdutoController..*+.new(..))
          || execution( * br.ufrn.imd.controller.remove.TelaRemoverProdutoController+.*(..))
          || execution(br.ufrn.imd.controller.remove.TelaRemoverProdutoController+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.ufrn.imd.controller.remove.TelaRemoverTagController object$rac): (execution( * br.ufrn.imd.controller.remove.TelaRemoverTagController..*+.*(..))
          || execution(br.ufrn.imd.controller.remove.TelaRemoverTagController..*+.new(..))
          || execution( * br.ufrn.imd.controller.remove.TelaRemoverTagController+.*(..))
          || execution(br.ufrn.imd.controller.remove.TelaRemoverTagController+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.ufrn.imd.controller.remove.TelaRemoverTagController..*+.*(..))
          || execution(br.ufrn.imd.controller.remove.TelaRemoverTagController..*+.new(..))
          || execution( * br.ufrn.imd.controller.remove.TelaRemoverTagController+.*(..))
          || execution(br.ufrn.imd.controller.remove.TelaRemoverTagController+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.ufrn.imd.controller.remove.TelaRemoverVinilController object$rac): (execution( * br.ufrn.imd.controller.remove.TelaRemoverVinilController..*+.*(..))
          || execution(br.ufrn.imd.controller.remove.TelaRemoverVinilController..*+.new(..))
          || execution( * br.ufrn.imd.controller.remove.TelaRemoverVinilController+.*(..))
          || execution(br.ufrn.imd.controller.remove.TelaRemoverVinilController+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.ufrn.imd.controller.remove.TelaRemoverVinilController..*+.*(..))
          || execution(br.ufrn.imd.controller.remove.TelaRemoverVinilController..*+.new(..))
          || execution( * br.ufrn.imd.controller.remove.TelaRemoverVinilController+.*(..))
          || execution(br.ufrn.imd.controller.remove.TelaRemoverVinilController+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.ufrn.imd.controller.update.TelaAtualizacaoClienteController object$rac): (execution( * br.ufrn.imd.controller.update.TelaAtualizacaoClienteController..*+.*(..))
          || execution(br.ufrn.imd.controller.update.TelaAtualizacaoClienteController..*+.new(..))
          || execution( * br.ufrn.imd.controller.update.TelaAtualizacaoClienteController+.*(..))
          || execution(br.ufrn.imd.controller.update.TelaAtualizacaoClienteController+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.ufrn.imd.controller.update.TelaAtualizacaoClienteController..*+.*(..))
          || execution(br.ufrn.imd.controller.update.TelaAtualizacaoClienteController..*+.new(..))
          || execution( * br.ufrn.imd.controller.update.TelaAtualizacaoClienteController+.*(..))
          || execution(br.ufrn.imd.controller.update.TelaAtualizacaoClienteController+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.ufrn.imd.controller.update.TelaAtualizacaoJogoController object$rac): (execution( * br.ufrn.imd.controller.update.TelaAtualizacaoJogoController..*+.*(..))
          || execution(br.ufrn.imd.controller.update.TelaAtualizacaoJogoController..*+.new(..))
          || execution( * br.ufrn.imd.controller.update.TelaAtualizacaoJogoController+.*(..))
          || execution(br.ufrn.imd.controller.update.TelaAtualizacaoJogoController+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.ufrn.imd.controller.update.TelaAtualizacaoJogoController..*+.*(..))
          || execution(br.ufrn.imd.controller.update.TelaAtualizacaoJogoController..*+.new(..))
          || execution( * br.ufrn.imd.controller.update.TelaAtualizacaoJogoController+.*(..))
          || execution(br.ufrn.imd.controller.update.TelaAtualizacaoJogoController+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.ufrn.imd.controller.update.TelaAtualizacaoLivroController object$rac): (execution( * br.ufrn.imd.controller.update.TelaAtualizacaoLivroController..*+.*(..))
          || execution(br.ufrn.imd.controller.update.TelaAtualizacaoLivroController..*+.new(..))
          || execution( * br.ufrn.imd.controller.update.TelaAtualizacaoLivroController+.*(..))
          || execution(br.ufrn.imd.controller.update.TelaAtualizacaoLivroController+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.ufrn.imd.controller.update.TelaAtualizacaoLivroController..*+.*(..))
          || execution(br.ufrn.imd.controller.update.TelaAtualizacaoLivroController..*+.new(..))
          || execution( * br.ufrn.imd.controller.update.TelaAtualizacaoLivroController+.*(..))
          || execution(br.ufrn.imd.controller.update.TelaAtualizacaoLivroController+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.ufrn.imd.controller.update.TelaAtualizacaoTagController object$rac): (execution( * br.ufrn.imd.controller.update.TelaAtualizacaoTagController..*+.*(..))
          || execution(br.ufrn.imd.controller.update.TelaAtualizacaoTagController..*+.new(..))
          || execution( * br.ufrn.imd.controller.update.TelaAtualizacaoTagController+.*(..))
          || execution(br.ufrn.imd.controller.update.TelaAtualizacaoTagController+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.ufrn.imd.controller.update.TelaAtualizacaoTagController..*+.*(..))
          || execution(br.ufrn.imd.controller.update.TelaAtualizacaoTagController..*+.new(..))
          || execution( * br.ufrn.imd.controller.update.TelaAtualizacaoTagController+.*(..))
          || execution(br.ufrn.imd.controller.update.TelaAtualizacaoTagController+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.ufrn.imd.controller.update.TelaAtualizacaoTransacaoController object$rac): (execution( * br.ufrn.imd.controller.update.TelaAtualizacaoTransacaoController..*+.*(..))
          || execution(br.ufrn.imd.controller.update.TelaAtualizacaoTransacaoController..*+.new(..))
          || execution( * br.ufrn.imd.controller.update.TelaAtualizacaoTransacaoController+.*(..))
          || execution(br.ufrn.imd.controller.update.TelaAtualizacaoTransacaoController+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.ufrn.imd.controller.update.TelaAtualizacaoTransacaoController..*+.*(..))
          || execution(br.ufrn.imd.controller.update.TelaAtualizacaoTransacaoController..*+.new(..))
          || execution( * br.ufrn.imd.controller.update.TelaAtualizacaoTransacaoController+.*(..))
          || execution(br.ufrn.imd.controller.update.TelaAtualizacaoTransacaoController+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.ufrn.imd.controller.update.TelaAtualizacaoVinilController object$rac): (execution( * br.ufrn.imd.controller.update.TelaAtualizacaoVinilController..*+.*(..))
          || execution(br.ufrn.imd.controller.update.TelaAtualizacaoVinilController..*+.new(..))
          || execution( * br.ufrn.imd.controller.update.TelaAtualizacaoVinilController+.*(..))
          || execution(br.ufrn.imd.controller.update.TelaAtualizacaoVinilController+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.ufrn.imd.controller.update.TelaAtualizacaoVinilController..*+.*(..))
          || execution(br.ufrn.imd.controller.update.TelaAtualizacaoVinilController..*+.new(..))
          || execution( * br.ufrn.imd.controller.update.TelaAtualizacaoVinilController+.*(..))
          || execution(br.ufrn.imd.controller.update.TelaAtualizacaoVinilController+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to recover checked exceptions. *
  *  This is based on the exception introduction pattern by Laddad. */
  after(final br.ufrn.imd.data.ClientDAO object$rac) throwing(JMLInternalRuntimeException rac$e)
    throws br.ufrn.imd.exceptions.DataException : (execution(* br.ufrn.imd.data.ClientDAO..*+.*(..) throws br.ufrn.imd.exceptions.DataException) ||
    execution(br.ufrn.imd.data.ClientDAO..*+.new(..) throws br.ufrn.imd.exceptions.DataException) ||
execution(* br.ufrn.imd.data.ClientDAO+.*(..) throws br.ufrn.imd.exceptions.DataException) ||
    execution(br.ufrn.imd.data.ClientDAO+.new(..) throws br.ufrn.imd.exceptions.DataException)) && 
   target(object$rac) {
    Throwable cause = rac$e.getCause();
    if(cause instanceof br.ufrn.imd.exceptions.DataException) {
      throw (br.ufrn.imd.exceptions.DataException)cause;
    }
    JMLChecker.rethrowUncheckedException(cause);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.ufrn.imd.data.ClientDAO object$rac): (execution( * br.ufrn.imd.data.ClientDAO..*+.*(..))
          || execution(br.ufrn.imd.data.ClientDAO..*+.new(..))
          || execution( * br.ufrn.imd.data.ClientDAO+.*(..))
          || execution(br.ufrn.imd.data.ClientDAO+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.ufrn.imd.data.ClientDAO..*+.*(..))
          || execution(br.ufrn.imd.data.ClientDAO..*+.new(..))
          || execution( * br.ufrn.imd.data.ClientDAO+.*(..))
          || execution(br.ufrn.imd.data.ClientDAO+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to recover checked exceptions. *
  *  This is based on the exception introduction pattern by Laddad. */
  after(final br.ufrn.imd.data.ClientDAOJDBC object$rac) throwing(JMLInternalRuntimeException rac$e)
    throws br.ufrn.imd.exceptions.DataException : (execution(* br.ufrn.imd.data.ClientDAOJDBC..*+.*(..) throws br.ufrn.imd.exceptions.DataException) ||
    execution(br.ufrn.imd.data.ClientDAOJDBC..*+.new(..) throws br.ufrn.imd.exceptions.DataException) ||
execution(* br.ufrn.imd.data.ClientDAOJDBC+.*(..) throws br.ufrn.imd.exceptions.DataException) ||
    execution(br.ufrn.imd.data.ClientDAOJDBC+.new(..) throws br.ufrn.imd.exceptions.DataException)) && 
   target(object$rac) {
    Throwable cause = rac$e.getCause();
    if(cause instanceof br.ufrn.imd.exceptions.DataException) {
      throw (br.ufrn.imd.exceptions.DataException)cause;
    }
    JMLChecker.rethrowUncheckedException(cause);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.ufrn.imd.data.ClientDAOJDBC object$rac): (execution( * br.ufrn.imd.data.ClientDAOJDBC..*+.*(..))
          || execution(br.ufrn.imd.data.ClientDAOJDBC..*+.new(..))
          || execution( * br.ufrn.imd.data.ClientDAOJDBC+.*(..))
          || execution(br.ufrn.imd.data.ClientDAOJDBC+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.ufrn.imd.data.ClientDAOJDBC..*+.*(..))
          || execution(br.ufrn.imd.data.ClientDAOJDBC..*+.new(..))
          || execution( * br.ufrn.imd.data.ClientDAOJDBC+.*(..))
          || execution(br.ufrn.imd.data.ClientDAOJDBC+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to recover checked exceptions. *
  *  This is based on the exception introduction pattern by Laddad. */
  after(final br.ufrn.imd.data.ProductBookDAOJDBC object$rac) throwing(JMLInternalRuntimeException rac$e)
    throws br.ufrn.imd.exceptions.DataException : (execution(* br.ufrn.imd.data.ProductBookDAOJDBC..*+.*(..) throws br.ufrn.imd.exceptions.DataException) ||
    execution(br.ufrn.imd.data.ProductBookDAOJDBC..*+.new(..) throws br.ufrn.imd.exceptions.DataException) ||
execution(* br.ufrn.imd.data.ProductBookDAOJDBC+.*(..) throws br.ufrn.imd.exceptions.DataException) ||
    execution(br.ufrn.imd.data.ProductBookDAOJDBC+.new(..) throws br.ufrn.imd.exceptions.DataException)) && 
   target(object$rac) {
    Throwable cause = rac$e.getCause();
    if(cause instanceof br.ufrn.imd.exceptions.DataException) {
      throw (br.ufrn.imd.exceptions.DataException)cause;
    }
    JMLChecker.rethrowUncheckedException(cause);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.ufrn.imd.data.ProductBookDAOJDBC object$rac): (execution( * br.ufrn.imd.data.ProductBookDAOJDBC..*+.*(..))
          || execution(br.ufrn.imd.data.ProductBookDAOJDBC..*+.new(..))
          || execution( * br.ufrn.imd.data.ProductBookDAOJDBC+.*(..))
          || execution(br.ufrn.imd.data.ProductBookDAOJDBC+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.ufrn.imd.data.ProductBookDAOJDBC..*+.*(..))
          || execution(br.ufrn.imd.data.ProductBookDAOJDBC..*+.new(..))
          || execution( * br.ufrn.imd.data.ProductBookDAOJDBC+.*(..))
          || execution(br.ufrn.imd.data.ProductBookDAOJDBC+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to recover checked exceptions. *
  *  This is based on the exception introduction pattern by Laddad. */
  after(final br.ufrn.imd.data.ProductDAOJDBC object$rac) throwing(JMLInternalRuntimeException rac$e)
    throws br.ufrn.imd.exceptions.DataException : (execution(* br.ufrn.imd.data.ProductDAOJDBC..*+.*(..) throws br.ufrn.imd.exceptions.DataException) ||
    execution(br.ufrn.imd.data.ProductDAOJDBC..*+.new(..) throws br.ufrn.imd.exceptions.DataException) ||
execution(* br.ufrn.imd.data.ProductDAOJDBC+.*(..) throws br.ufrn.imd.exceptions.DataException) ||
    execution(br.ufrn.imd.data.ProductDAOJDBC+.new(..) throws br.ufrn.imd.exceptions.DataException)) && 
   target(object$rac) {
    Throwable cause = rac$e.getCause();
    if(cause instanceof br.ufrn.imd.exceptions.DataException) {
      throw (br.ufrn.imd.exceptions.DataException)cause;
    }
    JMLChecker.rethrowUncheckedException(cause);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.ufrn.imd.data.ProductDAOJDBC object$rac): (execution( * br.ufrn.imd.data.ProductDAOJDBC..*+.*(..))
          || execution(br.ufrn.imd.data.ProductDAOJDBC..*+.new(..))
          || execution( * br.ufrn.imd.data.ProductDAOJDBC+.*(..))
          || execution(br.ufrn.imd.data.ProductDAOJDBC+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.ufrn.imd.data.ProductDAOJDBC..*+.*(..))
          || execution(br.ufrn.imd.data.ProductDAOJDBC..*+.new(..))
          || execution( * br.ufrn.imd.data.ProductDAOJDBC+.*(..))
          || execution(br.ufrn.imd.data.ProductDAOJDBC+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to recover checked exceptions. *
  *  This is based on the exception introduction pattern by Laddad. */
  after(final br.ufrn.imd.data.ProductGameDAOJDBC object$rac) throwing(JMLInternalRuntimeException rac$e)
    throws br.ufrn.imd.exceptions.DataException : (execution(* br.ufrn.imd.data.ProductGameDAOJDBC..*+.*(..) throws br.ufrn.imd.exceptions.DataException) ||
    execution(br.ufrn.imd.data.ProductGameDAOJDBC..*+.new(..) throws br.ufrn.imd.exceptions.DataException) ||
execution(* br.ufrn.imd.data.ProductGameDAOJDBC+.*(..) throws br.ufrn.imd.exceptions.DataException) ||
    execution(br.ufrn.imd.data.ProductGameDAOJDBC+.new(..) throws br.ufrn.imd.exceptions.DataException)) && 
   target(object$rac) {
    Throwable cause = rac$e.getCause();
    if(cause instanceof br.ufrn.imd.exceptions.DataException) {
      throw (br.ufrn.imd.exceptions.DataException)cause;
    }
    JMLChecker.rethrowUncheckedException(cause);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.ufrn.imd.data.ProductGameDAOJDBC object$rac): (execution( * br.ufrn.imd.data.ProductGameDAOJDBC..*+.*(..))
          || execution(br.ufrn.imd.data.ProductGameDAOJDBC..*+.new(..))
          || execution( * br.ufrn.imd.data.ProductGameDAOJDBC+.*(..))
          || execution(br.ufrn.imd.data.ProductGameDAOJDBC+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.ufrn.imd.data.ProductGameDAOJDBC..*+.*(..))
          || execution(br.ufrn.imd.data.ProductGameDAOJDBC..*+.new(..))
          || execution( * br.ufrn.imd.data.ProductGameDAOJDBC+.*(..))
          || execution(br.ufrn.imd.data.ProductGameDAOJDBC+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to recover checked exceptions. *
  *  This is based on the exception introduction pattern by Laddad. */
  after(final br.ufrn.imd.data.ProductVinylDAOJDBC object$rac) throwing(JMLInternalRuntimeException rac$e)
    throws br.ufrn.imd.exceptions.DataException : (execution(* br.ufrn.imd.data.ProductVinylDAOJDBC..*+.*(..) throws br.ufrn.imd.exceptions.DataException) ||
    execution(br.ufrn.imd.data.ProductVinylDAOJDBC..*+.new(..) throws br.ufrn.imd.exceptions.DataException) ||
execution(* br.ufrn.imd.data.ProductVinylDAOJDBC+.*(..) throws br.ufrn.imd.exceptions.DataException) ||
    execution(br.ufrn.imd.data.ProductVinylDAOJDBC+.new(..) throws br.ufrn.imd.exceptions.DataException)) && 
   target(object$rac) {
    Throwable cause = rac$e.getCause();
    if(cause instanceof br.ufrn.imd.exceptions.DataException) {
      throw (br.ufrn.imd.exceptions.DataException)cause;
    }
    JMLChecker.rethrowUncheckedException(cause);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.ufrn.imd.data.ProductVinylDAOJDBC object$rac): (execution( * br.ufrn.imd.data.ProductVinylDAOJDBC..*+.*(..))
          || execution(br.ufrn.imd.data.ProductVinylDAOJDBC..*+.new(..))
          || execution( * br.ufrn.imd.data.ProductVinylDAOJDBC+.*(..))
          || execution(br.ufrn.imd.data.ProductVinylDAOJDBC+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.ufrn.imd.data.ProductVinylDAOJDBC..*+.*(..))
          || execution(br.ufrn.imd.data.ProductVinylDAOJDBC..*+.new(..))
          || execution( * br.ufrn.imd.data.ProductVinylDAOJDBC+.*(..))
          || execution(br.ufrn.imd.data.ProductVinylDAOJDBC+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to recover checked exceptions. *
  *  This is based on the exception introduction pattern by Laddad. */
  after(final br.ufrn.imd.data.TagDAO object$rac) throwing(JMLInternalRuntimeException rac$e)
    throws br.ufrn.imd.exceptions.DataException : (execution(* br.ufrn.imd.data.TagDAO..*+.*(..) throws br.ufrn.imd.exceptions.DataException) ||
    execution(br.ufrn.imd.data.TagDAO..*+.new(..) throws br.ufrn.imd.exceptions.DataException) ||
execution(* br.ufrn.imd.data.TagDAO+.*(..) throws br.ufrn.imd.exceptions.DataException) ||
    execution(br.ufrn.imd.data.TagDAO+.new(..) throws br.ufrn.imd.exceptions.DataException)) && 
   target(object$rac) {
    Throwable cause = rac$e.getCause();
    if(cause instanceof br.ufrn.imd.exceptions.DataException) {
      throw (br.ufrn.imd.exceptions.DataException)cause;
    }
    JMLChecker.rethrowUncheckedException(cause);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.ufrn.imd.data.TagDAO object$rac): (execution( * br.ufrn.imd.data.TagDAO..*+.*(..))
          || execution(br.ufrn.imd.data.TagDAO..*+.new(..))
          || execution( * br.ufrn.imd.data.TagDAO+.*(..))
          || execution(br.ufrn.imd.data.TagDAO+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.ufrn.imd.data.TagDAO..*+.*(..))
          || execution(br.ufrn.imd.data.TagDAO..*+.new(..))
          || execution( * br.ufrn.imd.data.TagDAO+.*(..))
          || execution(br.ufrn.imd.data.TagDAO+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to recover checked exceptions. *
  *  This is based on the exception introduction pattern by Laddad. */
  after(final br.ufrn.imd.data.TagDAOJDBC object$rac) throwing(JMLInternalRuntimeException rac$e)
    throws br.ufrn.imd.exceptions.DataException : (execution(* br.ufrn.imd.data.TagDAOJDBC..*+.*(..) throws br.ufrn.imd.exceptions.DataException) ||
    execution(br.ufrn.imd.data.TagDAOJDBC..*+.new(..) throws br.ufrn.imd.exceptions.DataException) ||
execution(* br.ufrn.imd.data.TagDAOJDBC+.*(..) throws br.ufrn.imd.exceptions.DataException) ||
    execution(br.ufrn.imd.data.TagDAOJDBC+.new(..) throws br.ufrn.imd.exceptions.DataException)) && 
   target(object$rac) {
    Throwable cause = rac$e.getCause();
    if(cause instanceof br.ufrn.imd.exceptions.DataException) {
      throw (br.ufrn.imd.exceptions.DataException)cause;
    }
    JMLChecker.rethrowUncheckedException(cause);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.ufrn.imd.data.TagDAOJDBC object$rac): (execution( * br.ufrn.imd.data.TagDAOJDBC..*+.*(..))
          || execution(br.ufrn.imd.data.TagDAOJDBC..*+.new(..))
          || execution( * br.ufrn.imd.data.TagDAOJDBC+.*(..))
          || execution(br.ufrn.imd.data.TagDAOJDBC+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.ufrn.imd.data.TagDAOJDBC..*+.*(..))
          || execution(br.ufrn.imd.data.TagDAOJDBC..*+.new(..))
          || execution( * br.ufrn.imd.data.TagDAOJDBC+.*(..))
          || execution(br.ufrn.imd.data.TagDAOJDBC+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to recover checked exceptions. *
  *  This is based on the exception introduction pattern by Laddad. */
  after(final br.ufrn.imd.data.TransactionDAO object$rac) throwing(JMLInternalRuntimeException rac$e)
    throws br.ufrn.imd.exceptions.DataException : (execution(* br.ufrn.imd.data.TransactionDAO..*+.*(..) throws br.ufrn.imd.exceptions.DataException) ||
    execution(br.ufrn.imd.data.TransactionDAO..*+.new(..) throws br.ufrn.imd.exceptions.DataException) ||
execution(* br.ufrn.imd.data.TransactionDAO+.*(..) throws br.ufrn.imd.exceptions.DataException) ||
    execution(br.ufrn.imd.data.TransactionDAO+.new(..) throws br.ufrn.imd.exceptions.DataException)) && 
   target(object$rac) {
    Throwable cause = rac$e.getCause();
    if(cause instanceof br.ufrn.imd.exceptions.DataException) {
      throw (br.ufrn.imd.exceptions.DataException)cause;
    }
    JMLChecker.rethrowUncheckedException(cause);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.ufrn.imd.data.TransactionDAO object$rac): (execution( * br.ufrn.imd.data.TransactionDAO..*+.*(..))
          || execution(br.ufrn.imd.data.TransactionDAO..*+.new(..))
          || execution( * br.ufrn.imd.data.TransactionDAO+.*(..))
          || execution(br.ufrn.imd.data.TransactionDAO+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.ufrn.imd.data.TransactionDAO..*+.*(..))
          || execution(br.ufrn.imd.data.TransactionDAO..*+.new(..))
          || execution( * br.ufrn.imd.data.TransactionDAO+.*(..))
          || execution(br.ufrn.imd.data.TransactionDAO+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to recover checked exceptions. *
  *  This is based on the exception introduction pattern by Laddad. */
  after(final br.ufrn.imd.data.TransactionDAOJDBC object$rac) throwing(JMLInternalRuntimeException rac$e)
    throws br.ufrn.imd.exceptions.DataException : (execution(* br.ufrn.imd.data.TransactionDAOJDBC..*+.*(..) throws br.ufrn.imd.exceptions.DataException) ||
    execution(br.ufrn.imd.data.TransactionDAOJDBC..*+.new(..) throws br.ufrn.imd.exceptions.DataException) ||
execution(* br.ufrn.imd.data.TransactionDAOJDBC+.*(..) throws br.ufrn.imd.exceptions.DataException) ||
    execution(br.ufrn.imd.data.TransactionDAOJDBC+.new(..) throws br.ufrn.imd.exceptions.DataException)) && 
   target(object$rac) {
    Throwable cause = rac$e.getCause();
    if(cause instanceof br.ufrn.imd.exceptions.DataException) {
      throw (br.ufrn.imd.exceptions.DataException)cause;
    }
    JMLChecker.rethrowUncheckedException(cause);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.ufrn.imd.data.TransactionDAOJDBC object$rac): (execution( * br.ufrn.imd.data.TransactionDAOJDBC..*+.*(..))
          || execution(br.ufrn.imd.data.TransactionDAOJDBC..*+.new(..))
          || execution( * br.ufrn.imd.data.TransactionDAOJDBC+.*(..))
          || execution(br.ufrn.imd.data.TransactionDAOJDBC+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.ufrn.imd.data.TransactionDAOJDBC..*+.*(..))
          || execution(br.ufrn.imd.data.TransactionDAOJDBC..*+.new(..))
          || execution( * br.ufrn.imd.data.TransactionDAOJDBC+.*(..))
          || execution(br.ufrn.imd.data.TransactionDAOJDBC+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.ufrn.imd.data.connection.ConnectionJDBC object$rac): (execution( * br.ufrn.imd.data.connection.ConnectionJDBC..*+.*(..))
          || execution(br.ufrn.imd.data.connection.ConnectionJDBC..*+.new(..))
          || execution( * br.ufrn.imd.data.connection.ConnectionJDBC+.*(..))
          || execution(br.ufrn.imd.data.connection.ConnectionJDBC+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.ufrn.imd.data.connection.ConnectionJDBC..*+.*(..))
          || execution(br.ufrn.imd.data.connection.ConnectionJDBC..*+.new(..))
          || execution( * br.ufrn.imd.data.connection.ConnectionJDBC+.*(..))
          || execution(br.ufrn.imd.data.connection.ConnectionJDBC+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.ufrn.imd.data.connection.ConnectionStrings object$rac): (execution( * br.ufrn.imd.data.connection.ConnectionStrings..*+.*(..))
          || execution(br.ufrn.imd.data.connection.ConnectionStrings..*+.new(..))
          || execution( * br.ufrn.imd.data.connection.ConnectionStrings+.*(..))
          || execution(br.ufrn.imd.data.connection.ConnectionStrings+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.ufrn.imd.data.connection.ConnectionStrings..*+.*(..))
          || execution(br.ufrn.imd.data.connection.ConnectionStrings..*+.new(..))
          || execution( * br.ufrn.imd.data.connection.ConnectionStrings+.*(..))
          || execution(br.ufrn.imd.data.connection.ConnectionStrings+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.ufrn.imd.exceptions.BusinessException object$rac): (execution( * br.ufrn.imd.exceptions.BusinessException..*+.*(..))
          || execution(br.ufrn.imd.exceptions.BusinessException..*+.new(..))
          || execution( * br.ufrn.imd.exceptions.BusinessException+.*(..))
          || execution(br.ufrn.imd.exceptions.BusinessException+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.ufrn.imd.exceptions.BusinessException..*+.*(..))
          || execution(br.ufrn.imd.exceptions.BusinessException..*+.new(..))
          || execution( * br.ufrn.imd.exceptions.BusinessException+.*(..))
          || execution(br.ufrn.imd.exceptions.BusinessException+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.ufrn.imd.exceptions.DataException object$rac): (execution( * br.ufrn.imd.exceptions.DataException..*+.*(..))
          || execution(br.ufrn.imd.exceptions.DataException..*+.new(..))
          || execution( * br.ufrn.imd.exceptions.DataException+.*(..))
          || execution(br.ufrn.imd.exceptions.DataException+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.ufrn.imd.exceptions.DataException..*+.*(..))
          || execution(br.ufrn.imd.exceptions.DataException..*+.new(..))
          || execution( * br.ufrn.imd.exceptions.DataException+.*(..))
          || execution(br.ufrn.imd.exceptions.DataException+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.ufrn.imd.exceptions.GUIException object$rac): (execution( * br.ufrn.imd.exceptions.GUIException..*+.*(..))
          || execution(br.ufrn.imd.exceptions.GUIException..*+.new(..))
          || execution( * br.ufrn.imd.exceptions.GUIException+.*(..))
          || execution(br.ufrn.imd.exceptions.GUIException+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.ufrn.imd.exceptions.GUIException..*+.*(..))
          || execution(br.ufrn.imd.exceptions.GUIException..*+.new(..))
          || execution( * br.ufrn.imd.exceptions.GUIException+.*(..))
          || execution(br.ufrn.imd.exceptions.GUIException+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.ufrn.imd.factory.AbstractFactory object$rac): (execution( * br.ufrn.imd.factory.AbstractFactory..*+.*(..))
          || execution(br.ufrn.imd.factory.AbstractFactory..*+.new(..))
          || execution( * br.ufrn.imd.factory.AbstractFactory+.*(..))
          || execution(br.ufrn.imd.factory.AbstractFactory+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.ufrn.imd.factory.AbstractFactory..*+.*(..))
          || execution(br.ufrn.imd.factory.AbstractFactory..*+.new(..))
          || execution( * br.ufrn.imd.factory.AbstractFactory+.*(..))
          || execution(br.ufrn.imd.factory.AbstractFactory+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.ufrn.imd.factory.BookFactory object$rac): (execution( * br.ufrn.imd.factory.BookFactory..*+.*(..))
          || execution(br.ufrn.imd.factory.BookFactory..*+.new(..))
          || execution( * br.ufrn.imd.factory.BookFactory+.*(..))
          || execution(br.ufrn.imd.factory.BookFactory+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.ufrn.imd.factory.BookFactory..*+.*(..))
          || execution(br.ufrn.imd.factory.BookFactory..*+.new(..))
          || execution( * br.ufrn.imd.factory.BookFactory+.*(..))
          || execution(br.ufrn.imd.factory.BookFactory+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.ufrn.imd.factory.Distributor object$rac): (execution( * br.ufrn.imd.factory.Distributor..*+.*(..))
          || execution(br.ufrn.imd.factory.Distributor..*+.new(..))
          || execution( * br.ufrn.imd.factory.Distributor+.*(..))
          || execution(br.ufrn.imd.factory.Distributor+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.ufrn.imd.factory.Distributor..*+.*(..))
          || execution(br.ufrn.imd.factory.Distributor..*+.new(..))
          || execution( * br.ufrn.imd.factory.Distributor+.*(..))
          || execution(br.ufrn.imd.factory.Distributor+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.ufrn.imd.factory.GameFactory object$rac): (execution( * br.ufrn.imd.factory.GameFactory..*+.*(..))
          || execution(br.ufrn.imd.factory.GameFactory..*+.new(..))
          || execution( * br.ufrn.imd.factory.GameFactory+.*(..))
          || execution(br.ufrn.imd.factory.GameFactory+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.ufrn.imd.factory.GameFactory..*+.*(..))
          || execution(br.ufrn.imd.factory.GameFactory..*+.new(..))
          || execution( * br.ufrn.imd.factory.GameFactory+.*(..))
          || execution(br.ufrn.imd.factory.GameFactory+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.ufrn.imd.factory.VinylFactory object$rac): (execution( * br.ufrn.imd.factory.VinylFactory..*+.*(..))
          || execution(br.ufrn.imd.factory.VinylFactory..*+.new(..))
          || execution( * br.ufrn.imd.factory.VinylFactory+.*(..))
          || execution(br.ufrn.imd.factory.VinylFactory+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.ufrn.imd.factory.VinylFactory..*+.*(..))
          || execution(br.ufrn.imd.factory.VinylFactory..*+.new(..))
          || execution( * br.ufrn.imd.factory.VinylFactory+.*(..))
          || execution(br.ufrn.imd.factory.VinylFactory+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.ufrn.imd.model.Client object$rac): (execution( * br.ufrn.imd.model.Client..*+.*(..))
          || execution(br.ufrn.imd.model.Client..*+.new(..))
          || execution( * br.ufrn.imd.model.Client+.*(..))
          || execution(br.ufrn.imd.model.Client+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.ufrn.imd.model.Client..*+.*(..))
          || execution(br.ufrn.imd.model.Client..*+.new(..))
          || execution( * br.ufrn.imd.model.Client+.*(..))
          || execution(br.ufrn.imd.model.Client+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to recover checked exceptions. *
  *  This is based on the exception introduction pattern by Laddad. */
  after(final br.ufrn.imd.model.Product object$rac) throwing(JMLInternalRuntimeException rac$e)
    throws br.ufrn.imd.exceptions.BusinessException : (execution(* br.ufrn.imd.model.Product..*+.*(..) throws br.ufrn.imd.exceptions.BusinessException) ||
    execution(br.ufrn.imd.model.Product..*+.new(..) throws br.ufrn.imd.exceptions.BusinessException) ||
execution(* br.ufrn.imd.model.Product+.*(..) throws br.ufrn.imd.exceptions.BusinessException) ||
    execution(br.ufrn.imd.model.Product+.new(..) throws br.ufrn.imd.exceptions.BusinessException)) && 
   target(object$rac) {
    Throwable cause = rac$e.getCause();
    if(cause instanceof br.ufrn.imd.exceptions.BusinessException) {
      throw (br.ufrn.imd.exceptions.BusinessException)cause;
    }
    JMLChecker.rethrowUncheckedException(cause);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.ufrn.imd.model.Product object$rac): (execution( * br.ufrn.imd.model.Product..*+.*(..))
          || execution(br.ufrn.imd.model.Product..*+.new(..))
          || execution( * br.ufrn.imd.model.Product+.*(..))
          || execution(br.ufrn.imd.model.Product+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.ufrn.imd.model.Product..*+.*(..))
          || execution(br.ufrn.imd.model.Product..*+.new(..))
          || execution( * br.ufrn.imd.model.Product+.*(..))
          || execution(br.ufrn.imd.model.Product+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to recover checked exceptions. *
  *  This is based on the exception introduction pattern by Laddad. */
  after(final br.ufrn.imd.model.ProductBook object$rac) throwing(JMLInternalRuntimeException rac$e)
    throws br.ufrn.imd.exceptions.BusinessException : (execution(* br.ufrn.imd.model.ProductBook..*+.*(..) throws br.ufrn.imd.exceptions.BusinessException) ||
    execution(br.ufrn.imd.model.ProductBook..*+.new(..) throws br.ufrn.imd.exceptions.BusinessException) ||
execution(* br.ufrn.imd.model.ProductBook+.*(..) throws br.ufrn.imd.exceptions.BusinessException) ||
    execution(br.ufrn.imd.model.ProductBook+.new(..) throws br.ufrn.imd.exceptions.BusinessException)) && 
   target(object$rac) {
    Throwable cause = rac$e.getCause();
    if(cause instanceof br.ufrn.imd.exceptions.BusinessException) {
      throw (br.ufrn.imd.exceptions.BusinessException)cause;
    }
    JMLChecker.rethrowUncheckedException(cause);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.ufrn.imd.model.ProductBook object$rac): (execution( * br.ufrn.imd.model.ProductBook..*+.*(..))
          || execution(br.ufrn.imd.model.ProductBook..*+.new(..))
          || execution( * br.ufrn.imd.model.ProductBook+.*(..))
          || execution(br.ufrn.imd.model.ProductBook+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.ufrn.imd.model.ProductBook..*+.*(..))
          || execution(br.ufrn.imd.model.ProductBook..*+.new(..))
          || execution( * br.ufrn.imd.model.ProductBook+.*(..))
          || execution(br.ufrn.imd.model.ProductBook+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to recover checked exceptions. *
  *  This is based on the exception introduction pattern by Laddad. */
  after(final br.ufrn.imd.model.ProductGame object$rac) throwing(JMLInternalRuntimeException rac$e)
    throws br.ufrn.imd.exceptions.BusinessException : (execution(* br.ufrn.imd.model.ProductGame..*+.*(..) throws br.ufrn.imd.exceptions.BusinessException) ||
    execution(br.ufrn.imd.model.ProductGame..*+.new(..) throws br.ufrn.imd.exceptions.BusinessException) ||
execution(* br.ufrn.imd.model.ProductGame+.*(..) throws br.ufrn.imd.exceptions.BusinessException) ||
    execution(br.ufrn.imd.model.ProductGame+.new(..) throws br.ufrn.imd.exceptions.BusinessException)) && 
   target(object$rac) {
    Throwable cause = rac$e.getCause();
    if(cause instanceof br.ufrn.imd.exceptions.BusinessException) {
      throw (br.ufrn.imd.exceptions.BusinessException)cause;
    }
    JMLChecker.rethrowUncheckedException(cause);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.ufrn.imd.model.ProductGame object$rac): (execution( * br.ufrn.imd.model.ProductGame..*+.*(..))
          || execution(br.ufrn.imd.model.ProductGame..*+.new(..))
          || execution( * br.ufrn.imd.model.ProductGame+.*(..))
          || execution(br.ufrn.imd.model.ProductGame+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.ufrn.imd.model.ProductGame..*+.*(..))
          || execution(br.ufrn.imd.model.ProductGame..*+.new(..))
          || execution( * br.ufrn.imd.model.ProductGame+.*(..))
          || execution(br.ufrn.imd.model.ProductGame+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to recover checked exceptions. *
  *  This is based on the exception introduction pattern by Laddad. */
  after(final br.ufrn.imd.model.ProductVinyl object$rac) throwing(JMLInternalRuntimeException rac$e)
    throws br.ufrn.imd.exceptions.BusinessException : (execution(* br.ufrn.imd.model.ProductVinyl..*+.*(..) throws br.ufrn.imd.exceptions.BusinessException) ||
    execution(br.ufrn.imd.model.ProductVinyl..*+.new(..) throws br.ufrn.imd.exceptions.BusinessException) ||
execution(* br.ufrn.imd.model.ProductVinyl+.*(..) throws br.ufrn.imd.exceptions.BusinessException) ||
    execution(br.ufrn.imd.model.ProductVinyl+.new(..) throws br.ufrn.imd.exceptions.BusinessException)) && 
   target(object$rac) {
    Throwable cause = rac$e.getCause();
    if(cause instanceof br.ufrn.imd.exceptions.BusinessException) {
      throw (br.ufrn.imd.exceptions.BusinessException)cause;
    }
    JMLChecker.rethrowUncheckedException(cause);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.ufrn.imd.model.ProductVinyl object$rac): (execution( * br.ufrn.imd.model.ProductVinyl..*+.*(..))
          || execution(br.ufrn.imd.model.ProductVinyl..*+.new(..))
          || execution( * br.ufrn.imd.model.ProductVinyl+.*(..))
          || execution(br.ufrn.imd.model.ProductVinyl+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.ufrn.imd.model.ProductVinyl..*+.*(..))
          || execution(br.ufrn.imd.model.ProductVinyl..*+.new(..))
          || execution( * br.ufrn.imd.model.ProductVinyl+.*(..))
          || execution(br.ufrn.imd.model.ProductVinyl+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.ufrn.imd.model.Tag object$rac): (execution( * br.ufrn.imd.model.Tag..*+.*(..))
          || execution(br.ufrn.imd.model.Tag..*+.new(..))
          || execution( * br.ufrn.imd.model.Tag+.*(..))
          || execution(br.ufrn.imd.model.Tag+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.ufrn.imd.model.Tag..*+.*(..))
          || execution(br.ufrn.imd.model.Tag..*+.new(..))
          || execution( * br.ufrn.imd.model.Tag+.*(..))
          || execution(br.ufrn.imd.model.Tag+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.ufrn.imd.model.Transaction object$rac): (execution( * br.ufrn.imd.model.Transaction..*+.*(..))
          || execution(br.ufrn.imd.model.Transaction..*+.new(..))
          || execution( * br.ufrn.imd.model.Transaction+.*(..))
          || execution(br.ufrn.imd.model.Transaction+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.ufrn.imd.model.Transaction..*+.*(..))
          || execution(br.ufrn.imd.model.Transaction..*+.new(..))
          || execution( * br.ufrn.imd.model.Transaction+.*(..))
          || execution(br.ufrn.imd.model.Transaction+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.ufrn.imd.model.recommendation.WeightProduct object$rac): (execution( * br.ufrn.imd.model.recommendation.WeightProduct..*+.*(..))
          || execution(br.ufrn.imd.model.recommendation.WeightProduct..*+.new(..))
          || execution( * br.ufrn.imd.model.recommendation.WeightProduct+.*(..))
          || execution(br.ufrn.imd.model.recommendation.WeightProduct+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.ufrn.imd.model.recommendation.WeightProduct..*+.*(..))
          || execution(br.ufrn.imd.model.recommendation.WeightProduct..*+.new(..))
          || execution( * br.ufrn.imd.model.recommendation.WeightProduct+.*(..))
          || execution(br.ufrn.imd.model.recommendation.WeightProduct+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.ufrn.imd.model.recommendation.WeightTag object$rac): (execution( * br.ufrn.imd.model.recommendation.WeightTag..*+.*(..))
          || execution(br.ufrn.imd.model.recommendation.WeightTag..*+.new(..))
          || execution( * br.ufrn.imd.model.recommendation.WeightTag+.*(..))
          || execution(br.ufrn.imd.model.recommendation.WeightTag+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.ufrn.imd.model.recommendation.WeightTag..*+.*(..))
          || execution(br.ufrn.imd.model.recommendation.WeightTag..*+.new(..))
          || execution( * br.ufrn.imd.model.recommendation.WeightTag+.*(..))
          || execution(br.ufrn.imd.model.recommendation.WeightTag+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.ufrn.imd.view.PaymentAnswer object$rac): (execution( * br.ufrn.imd.view.PaymentAnswer..*+.*(..))
          || execution(br.ufrn.imd.view.PaymentAnswer..*+.new(..))
          || execution( * br.ufrn.imd.view.PaymentAnswer+.*(..))
          || execution(br.ufrn.imd.view.PaymentAnswer+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.ufrn.imd.view.PaymentAnswer..*+.*(..))
          || execution(br.ufrn.imd.view.PaymentAnswer..*+.new(..))
          || execution( * br.ufrn.imd.view.PaymentAnswer+.*(..))
          || execution(br.ufrn.imd.view.PaymentAnswer+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final br.ufrn.imd.view.Teste object$rac): (execution( * br.ufrn.imd.view.Teste..*+.*(..))
          || execution(br.ufrn.imd.view.Teste..*+.new(..))
          || execution( * br.ufrn.imd.view.Teste+.*(..))
          || execution(br.ufrn.imd.view.Teste+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * br.ufrn.imd.view.Teste..*+.*(..))
          || execution(br.ufrn.imd.view.Teste..*+.new(..))
          || execution( * br.ufrn.imd.view.Teste+.*(..))
          || execution(br.ufrn.imd.view.Teste+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

}